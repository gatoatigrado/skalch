package sketch.compiler.parser.gxlimport;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;
import static java.util.Collections.unmodifiableList;
import net.sourceforge.gxl.*;
import sketch.compiler.ast.core.*;
import sketch.compiler.ast.core.exprs.*;
import sketch.compiler.ast.core.stmts.*;
import sketch.compiler.ast.core.typs.*;
import sketch.compiler.ast.scala.exprs.*;

{% macro get_singleton1(v, java_arg) -%}
{% if java_arg.cn == "JavaSubtreeSingletonList" -%}
    createSingleton({{ v }})
{%- else -%}
    {{ v }}
{%- endif %}
{% endmacro %}

{%- macro followChain(java_arg, gxl_arg, arg_name, isVector=False, tmp_idx=0) %}

{%- set gxl_first = gxl_arg[0] %}
{% set gxl_is_last = (len(gxl_arg) == 1) %}
{% set latest_arg = ("node" if tmp_idx == 0 else "%s_tmp%d" %(arg_name, tmp_idx)) %}

{%- macro get_java_fcn(node=latest_arg) -%}
    get{{ java_arg }}(followEdge("{{ gxl_first }}", {{ node }}))
{%- endmacro %}
{%- macro get_singleton(v) %}{{ get_singleton1(v, java_arg) }}{% endmacro %}
{%- macro get_attribute() -%}
{% set name = "%s" %(java_arg) -%}
    get{{ name[0].upper() + name[1:] }}Attribute("{{ gxl_first }}", {{ latest_arg }})
{%- endmacro %}

{%- macro handle_subtree() %}
{% set latest = "followEdge(\"%s\", %s)" %(gxl_first, latest_arg) %}
{%-if isVector and gxl_is_last -%}
        {{ arg_name }}_vec.add({{ get_singleton(get_java_fcn()) }}); // gen marker 1
{%- elif gxl_is_last -%}
        {{ java_arg.typename() }} {{ arg_name }} = {{ get_singleton(get_java_fcn()) }}; // gen marker 2
{%- else -%}
        GXLNode {{ arg_name }}_tmp{{ tmp_idx + 1 }} = {{ latest }}; // gen marker 3
{{ followChain(java_arg, gxl_arg[1:], arg_name, isVector, tmp_idx + 1) }}
{%- endif %}
{%- endmacro %}

{%- macro get_list_singleton(is_singleton) -%}
    {%- set text = caller() -%}
    {%- if is_singleton %}getSingleton({{ text }}){% else %}{{ text }}{% endif %}
{%- endmacro -%}

{%- macro handle_vector() -%}
        Vector<{{ java_arg }}> {{ arg_name }}_vec = new Vector<{{ java_arg }}>();
        for (GXLNode {{ arg_name }}_tmp{{ tmp_idx + 1 }} : followEdge{{ gxl_first.cn[-2:] }}("{{ gxl_first.name.text }}", {{ latest_arg }})) {
{% filter indent(4) %}
{% if gxl_is_last %}
            {{ arg_name }}_vec.add(get{{ java_arg }}({{ arg_name }}_tmp{{ tmp_idx + 1 }})); // gen marker 4
{% else %}
    {{ followChain(java_arg, gxl_arg[1:], arg_name, True, tmp_idx + 1) }}
{% endif %}
{% endfilter %}

        }
        {{ java_arg.typename() }} {{ arg_name }} ={{ " " }}
            {%- call get_list_singleton(java_arg.cn == "JavaSubtreeGetListSingleton") -%}
                unmodifiableList({{ arg_name }}_vec)
            {%- endcall %};
{%- endmacro %}

{%- macro handle_attribute() %}
{{- assert(gxl_is_last, "attributes must be last") }}
{%- if isVector -%}
    {{ arg_name }}_vec.add({{ get_attribute() }}); // gen marker 6
{%- else -%}
    {{ java_arg.typename() }} {{ arg_name }} = {{ get_attribute() }}; // gen marker 7
{%- endif %}
{%- endmacro %}

{%- macro handle_this() -%}
    {{ java_arg.typename() }} {{ arg_name }} = {{ get_singleton("get%s(node)" %(java_arg)) }}; // gen marker 8
{%- endmacro %}


{%- if gxl_first.cn == "GxlSubtree" %}
        {{ handle_subtree() }}
{%- elif gxl_first.cn in ["GxlSubtreeOL", "GxlSubtreeUL"] -%}
        {%- if assert(not isVector, "recursive subtrees not supported. try rewriting in grgen.") %}{% endif %}
        {{ handle_vector() }}
{%- elif gxl_first.cn == "GxlAttribute" %}
        {{ handle_attribute() }}
{%- elif gxl_first.cn == "GxlImplicitSubtree" and gxl_first.name.text == "this" %}
        {{ handle_this() }}
{%- else %}
        unknown arg type {{ gxl_first.cn }}
{% endif %}

{%- endmacro -%}

/**
 * Handle simple node types. THIS IS A GENERATED FILE, modify the .jinja2 version.
 * @author gatoatigrado (nicholas tung) [email: ntung at ntung]
 * @copyright University of California, Berkeley 2009
 * @license This file is licensed under BSD license, available at
 *          http://creativecommons.org/licenses/BSD/. While not required, if you
 *          make changes, please consider contributing back!
 */
public class GxlHandleNodes extends GxlHandleNodesBase {
    public GxlHandleNodes(final GxlImport imprt) {
        super(imprt);
    }



    // === Get a specific java type from a known GXL node type ===
{% for node_match in node_match_cases %}
{% set special_retval = node_match.return_rep() %}
{% set java_type = "%s" %(node_match.javaname) %}

    // NOTE -- some constructors are marked deprecated to avoid later use.
    @SuppressWarnings("deprecation")
    public {{ java_type }} get{{ java_type }}From{{ node_match.gxlname }}(final GXLNode node) {
{% if special_retval %}
        return {{ special_retval }};
{% else %}
{% set gxl_args = node_match.gxl_args.argv %}
{% for i, java_arg in enumerate(node_match.java_args) %}
{% if hasattr(java_arg, "argdecl") and java_arg.argdecl("arg") %}
        {{ java_arg.argdecl( "arg%d" %(i) ) }};

{% elif not (hasattr(java_arg, "inlinedecl") and java_arg.inlinedecl()) %}
{{ followChain(java_arg, gxl_args[0].argv, "arg%d" %(i)) }}

{% set gxl_args = gxl_args[1:] %}
{% endif %}
{% endfor %}
        return {% if node_match.new_kw.new %}new {% else %}create{% endif -%}
            {{ node_match.javaname }}(
                {%- for i, java_arg in enumerate(node_match.java_args) %}
                    {%- if hasattr(java_arg, "inlinedecl") and java_arg.inlinedecl() -%}
                        {{ java_arg.inlinedecl() }}
                    {%- else -%}
                        arg{{i}}
                    {%- endif -%}
                    {{ ", " if not loop.last else "" }}
                {%- endfor -%}
            );
{% endif %}
    }
{% endfor %}



    // === Get by Java superclass ===
{% for typ, checks in ast_inheritance.items() %}

    public {{ typ }} get{{ typ }}(final GXLNode node) {
        String typ = GxlImport.nodeType(node);
        {% for gxl_typ, java_fcn in checks -%}
        {{ "else " if not loop.first else "" -}}
        if (typ.equals("{{ gxl_typ }}")) {
            return {{ java_fcn }}(node);
        }{{ " " }}
{%- endfor -%}
        else {
            throw new RuntimeException("no way to return a '{{ typ }}' from a node of type " + typ);
        }
    }
{% endfor %}
}

