package sketch.compiler.parser.gxlimport;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;
import static java.util.Collections.unmodifiableList;
import net.sourceforge.gxl.*;
import sketch.compiler.ast.core.*;
import sketch.compiler.ast.core.exprs.*;
import sketch.compiler.ast.core.stmts.*;
import sketch.compiler.ast.core.typs.*;

{% macro followChain(java_arg, gxl_arg, arg_name, isVector=False, tmp_idx=0) %}
{% set gxl_first = gxl_arg[0] %}
{% set gxl_is_last = (len(gxl_arg) == 1) %}
{% set latest_arg = ("node" if tmp_idx == 0 else "%s_tmp%d" %(arg_name, tmp_idx)) %}
    {%- if gxl_first.cn == "GxlSubtree" %}
        {%- set latest = "followEdge(\"%s\", %s)" %(gxl_first, latest_arg) %}
        {%- if isVector and gxl_is_last %}
        {{ arg_name }}_vec.add(get{{ java_arg }}({{ latest }}));
        {%- elif gxl_is_last %}
        {{ java_arg }} {{ arg_name }} = get{{ java_arg }}({{ latest }});
        {%- else %}
        GXLNode {{ arg_name }}_tmp{{ tmp_idx + 1 }} = {{ latest }};
{{ followChain(java_arg, gxl_arg[1:], arg_name, isVector, tmp_idx + 1) }}
        {%- endif %}
    {%- elif gxl_first.cn in ["GxlSubtreeOL", "GxlSubtreeUL"] %}
        {%- if assert(not isVector, "recursive subtrees not supported. try rewriting in grgen.") %}{% endif %}
        Vector<{{ java_arg }}> {{ arg_name }}_vec = new Vector<{{ java_arg }}>();
        for (GXLNode {{ arg_name }}_tmp{{ tmp_idx + 1 }} : followEdge{{ gxl_first.cn[-2:] }}("{{ gxl_first.name.text }}", {{ latest_arg }})) {
{% filter indent(4) %}
{% if gxl_is_last %}
            {{ arg_name }}_vec.add(get{{ java_arg }}({{ arg_name }}_tmp{{ tmp_idx + 1 }}));
{% else %}
    {{ followChain(java_arg, gxl_arg[1:], arg_name, True, tmp_idx + 1) }}
{% endif %}
{% endfilter %}

        }
        List<{{ java_arg }}> {{ arg_name }} = unmodifiableList({{ arg_name }}_vec);
    {%- elif gxl_first.cn == "GxlAttribute" %}
        {{- assert(gxl_is_last, "attributes must be last") }}
        {%- if isVector %}
        {{ arg_name }}_vec.add(get{{ java_arg }}Attribute("{{ gxl_first }}", {{ latest_arg }}));
        {%- else %}
        {{ java_arg }} {{ arg_name }} = get{{ java_arg }}Attribute("{{ gxl_first }}", {{ latest_arg }});
        {%- endif %}
    {%- elif gxl_first.cn == "GxlImplicitSubtree" and gxl_first.name.text == "this" %}
        {{ java_arg }} {{ arg_name }} = get{{ java_arg }}(node);
    {%- else %}
        unknown arg type {{ gxl_first.cn }}
    {%- endif %}
{% endmacro -%}

/**
 * Handle simple node types. THIS IS A GENERATED FILE, modify the .jinja2 version.
 * @author gatoatigrado (nicholas tung) [email: ntung at ntung]
 * @copyright University of California, Berkeley 2009
 * @license This file is licensed under BSD license, available at
 *          http://creativecommons.org/licenses/BSD/. While not required, if you
 *          make changes, please consider contributing back!
 */
public class GxlHandleNodes extends GxlHandleNodesBase {
    public GxlHandleNodes(final GxlImport imprt) {
        super(imprt);
    }



    // === Get a specific java type, branching on the current GXL node type ===
{% for java_type, matches in node_match_cases.items() %}

    public {{ java_type }} get{{ java_type }}(final GXLNode node) {
        String typ = GxlImport.nodeType(node);

{% for node_match in matches %}
        {{ "else " if not loop.first else "" }}if (typ.equals("{{ node_match.gxlname }}")) {
            return get{{ java_type }}From{{ node_match.gxlname }}(node);
        }{{ " " }}
{%- endfor -%}

        else {
            throw new RuntimeException("no way to return a {{ java_type }} from a node of type " + typ);
        }
    }
{% endfor %}



    // === Get a specific java type from a known GXL node type ===
{% for java_type, matches in node_match_cases.items() %}
{% for node_match in matches %}

    public {{ java_type }} get{{ java_type }}From{{ node_match.gxlname }}(final GXLNode node) {
{% set gxl_args = node_match.gxl_args.argv %}
{% for i, java_arg in enumerate(node_match.java_args) %}
{% if java_arg.cn == "JavaImplicitArg" %}
{% if java_arg.name == "ctx" %}
        FEContext arg{{ i }} = create_fe_context(node);
{% elif java_arg.name == "ctxnode" %}
        FENode arg{{ i }} = new DummyFENode(create_fe_context(node));
{% else %}
        unknown implicit arg type {{ java_arg.name }}
{% endif %}
{% else %}
{{ assert(gxl_args, "no args left.") }}
{{ followChain(java_arg, gxl_args[0].argv, "arg%d" %(i)) }}
{% set gxl_args = gxl_args[1:] %}
{%- endif %}
{% endfor %}

        return {% if node_match.new_kw.new %}new {% else %}create{% endif -%}
            {{ node_match.javaname }}(
                {%- for i in range(len(node_match.java_args.argv)) -%}
                    arg{{i}}{{ ", " if not loop.last else "" }}
                {%- endfor -%}
            );
    }
{% endfor %}
{% endfor %}



    // === Get by Java superclass ===
{% for superclass in ast_inheritance.keys() %}

{% set is_first = WrapperVariable(False) %}
    public {{ superclass }} get{{ superclass }}(final GXLNode node) {
        String typ = GxlImport.nodeType(node);
{% for subclass in ast_inheritance[superclass] %}
{% for node_match in node_match_cases[subclass] %}
{% do is_first.setValue(True) %}
        if (typ.equals("{{ node_match.gxlname }}")) {
            return get{{ node_match.javaname }}(node);
        }{{ " " }}
{%- endfor %}
{% endfor %}
{% if is_first.value -%}
        else {
            throw new RuntimeException("no way to return a {{ superclass }} from a node of type " + typ);
        }
{% else %}
        throw new RuntimeException("no gxl nodes corresponding to \"{{ superclass }}\"");
{% endif %}
    }
{% endfor %}
}

