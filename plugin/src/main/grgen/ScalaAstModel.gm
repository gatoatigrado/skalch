// -*- coding: utf-8 -*-
// author: gatoatigrado (nicholas tung) [ntung at ntung]

// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

node class ScAstNode {
    sourceFile : string;
    scalaSource : string;
    startLine : int;
    startCol : int;
    endLine : int;
    endCol : int;
}

// N.B. -- not an AST node
node class Symbol {
    symbolName : string;
    fullSymbolName : string;
}
edge class SymbolOwner;
edge class EnclosingFcn;
edge class BridgeFcn;
node class EmptyChain;
node class Annotation;


// === SKETCH constructs ===
// special symbols. Use these!
abstract node class SketchBaseSymbol extends Symbol;
node class AngelicSketchSymbol extends SketchBaseSymbol;
node class AssertFcnSymbol extends SketchBaseSymbol;
abstract node class SketchConstructSymbol extends SketchBaseSymbol;
node class BangBangSymbol extends SketchConstructSymbol;
node class HoleSymbol extends SketchConstructSymbol;

abstract node class SketchConstructCall extends ScAstNode;
node class BangBangCall extends SketchConstructCall;
node class HoleCall extends SketchConstructCall;



// === Symbol type annotations ===
abstract node class SketchAnnotation extends Annotation;
node class StaticSketchAnnotation extends SketchAnnotation;
node class IgnoreClassAnnotation extends Annotation;
node class OuterSymbol extends Symbol;
node class ScalaUnboxSymbol extends Symbol;
// can be LHS target of a sketch construct assignment
edge class CanBeConstructAssigned;



// === Scala symbols ===
// all symbols in the "scala" package become ScalaSymbols
node class ScalaSymbol extends Symbol;



// === Intermediate nodes ===
// execute this statement before the given one.
edge class CreatePreStmt;



// === SKETCH nodes ===

node class SKRoot;
node class SKHelperFcns;

node class SKAssert extends ScAstNode;
edge class SKAssertExpr;

node class SKBlock extends ScAstNode;
node class TmpSymbol extends Symbol;



// === Unit test markers ===
node class ConstructAssignableClassDef extends ClassDef;




// === Nodes from the GXL Scala compiler plugin ===

// Scala statements (if, for, blocks, etc.) which will need
// to be translated into statements for SKETCH and
// other c-style languages
node class ScalaExprStmt extends ScAstNode;

node class Assign extends ScAstNode;
node class Block extends ScalaExprStmt;
node class CaseDef extends ScAstNode;
node class ClassDef extends ScAstNode;
node class EmptyTree extends ScAstNode;

node class FcnCall extends ScAstNode;
node class FcnCallArrayLength extends FcnCall;
node class FcnCallBinaryDivide extends FcnCall;
node class FcnCallBinaryLessThan extends FcnCall;
node class FcnCallBinaryPrimitiveEquals extends FcnCall;
node class FcnCallBinarySameObj extends FcnCall;
node class FcnCallBinarySubtract extends FcnCall;
node class FcnCallTypeApply extends FcnCall;
node class FcnCallUnaryNonzero extends FcnCall;

node class FcnDef extends ScAstNode;
node class FcnSuperCall extends FcnCall;
node class FieldAccess extends ScAstNode;
node class If extends ScalaExprStmt;
node class MemberFcn extends ScAstNode;
node class NewArray extends ScAstNode;
node class NewConstructor extends FcnCall;
node class PackageDef extends ScAstNode;
node class QualifiedClassRef extends ScAstNode;
node class Return extends ScAstNode;
node class StaticFcnCall extends FcnCall;
node class Template extends ScAstNode;
node class This extends ScAstNode;
node class Throw extends ScAstNode;
node class Try extends ScalaExprStmt;
node class Typed extends ScAstNode;
node class ValDef extends ScAstNode;
node class VarRef extends ScAstNode;

abstract node class Constant extends ScAstNode;

node class BooleanConstant extends Constant {
    value : boolean;
}
node class CharConstant extends Constant {
    value : string;
}
node class LongConstant extends Constant {
    value : int;
}
node class IntConstant extends Constant {
    value : int;
}
node class StringConstant extends Constant {
    value : string;
}
node class NullTypeConstant extends Constant;
node class UnitConstant extends Constant;

node class FcnCallBinaryAdd extends FcnCall;
node class FcnCallBinaryLogicAnd extends FcnCall;
node class FcnCallArrayGet extends FcnCall;
node class FcnCallBinaryLogicOr extends FcnCall;
node class FcnCallUnaryIntCast extends FcnCall;
node class FcnCallBinaryGreaterThan extends FcnCall;
node class FcnCallBinaryLessThanOrEqual extends FcnCall;
node class FcnCallArraySet extends FcnCall;
node class FcnCallBinaryPrimitiveNotEquals extends FcnCall;
node class GotoCall extends ScAstNode;
node class FcnCallBinaryStringConcat extends FcnCall;
node class FcnCallBinaryNotSameObj extends FcnCall;
node class Bind extends ScAstNode;
node class NewArrayCall extends FcnCall;
node class Match extends ScAstNode;
node class LabelDef extends ScalaExprStmt;
node class FcnCallBinaryGreaterThanOrEqual extends FcnCall;
node class TypeTree extends ScAstNode;



// === Edge classes ===

abstract edge class FcnArg;

edge class AnnotationArgsChain;
edge class AnnotationArgsNext;
edge class AnnotationSymbol;
edge class ArrValueChain;
edge class ArrValueNext;
edge class AssignLhs;
edge class AssignRhs;
edge class AssignTypeSymbol;
edge class BlockExpr;
edge class BlockStmtChain;
edge class BlockStmtNext;
edge class BlockTypeSymbol;
edge class CaseBody;
edge class CaseGuard;
edge class CasePattern;
edge class ClassDefFieldSymbol;
edge class ClassDefImpl;
edge class ClassDefSymbol;
edge class ClassDefTypeParamsChain;
edge class ClassDefTypeParamsNext;
edge class ClassDefTypeSymbol;
edge class ClassRefSymbol;
edge class ClassRefTypeSymbol;
edge class ClsMethod;
edge class EmptyTreeTypeSymbol;
edge class FcnArgChain extends FcnArg;
edge class FcnArgNext extends FcnArg;
edge class FcnBody;
edge class FcnCallSymbol;
edge class FcnCallTypeArgsChain;
edge class FcnCallTypeSymbol;
edge class FcnDefParamsChain;
edge class FcnDefParamsNext;
edge class FcnDefSymbol;
edge class FcnDefTypeSymbol;
edge class FcnTarget;
edge class FieldAccessObject;
edge class IfCond;
edge class IfElse;
edge class IfThen;
edge class IfTypeSymbol;
edge class LabelDefSymbol;
edge class LiteralTypeSymbol;
edge class MatchCaseChain;
edge class MatchCaseNext;
edge class MatchTarget;
edge class NewClassSymbol;
edge class PackageDefElement;
edge class PackageDefSymbol;
edge class PackageDefTypeSymbol;
edge class ReturnExpr;
edge class ReturnSymbol;
edge class StaticMember;
edge class SymbolAnnotation;
edge class TemplateElement;
edge class TemplateSymbol;
edge class TemplateTypeSymbol;
edge class ThisSymbol;
edge class ThisTypeSymbol;
edge class ThrowExpr;
edge class ThrowTypeSymbol;
edge class TypedExpression;
edge class TypedTypeSymbol;
edge class TypeTreeSymbol;
edge class TypeTreeTypeSymbol;
edge class ValDefSymbol;
edge class ValDefTypeSymbol;
edge class ValDefRhs;
edge class VarRefSymbol;
edge class VarRefTypeSymbol;
edge class ClassRefTermSymbol;
edge class TypeSymbol;
edge class FcnArgLast;
edge class FcnDefParamsLast;
edge class BlockStmtLast;
edge class AnnotationArgsLast;
