// -*- coding: utf-8 -*-
// author: gatoatigrado (nicholas tung) [ntung at ntung]

// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

node class ScAstNode {
    sourceFile : string;
    scalaSource : string;
    startLine : int;
    startCol : int;
    endLine : int;
    endCol : int;
}

// N.B. -- not an AST node
node class Symbol {
    simpleName : string;
    symbolName : string;
    fullSymbolName : string;
    uniqueSymbolName : string;
}
edge class SymbolOwner;
edge class EnclosingFcn;
edge class BridgeFcn;
node class EmptyChain extends ScAstNode;
node class Annotation;


// === Abstract node types ===
abstract node class ValDefOrAssign;
abstract edge class ValDefOrAssignRhs;
// NOTE -- since assigns are more complicated, subpatterns must be used to grab
// symbols (probably only implemented for simple cases)

// === SKETCH constructs ===
// special symbols. Use these!
abstract node class SketchBaseSymbol extends Symbol;
node class AngelicSketchSymbol extends SketchBaseSymbol;
node class SketchClassSymbol extends SketchBaseSymbol;
node class AssertFcnSymbol extends SketchBaseSymbol;
abstract node class SketchConstructSymbol extends SketchBaseSymbol;
node class BangBangSymbol extends SketchConstructSymbol;
node class HoleSymbol extends SketchConstructSymbol;

abstract node class SketchConstructCall extends ScAstNode, BlockifySafe;
node class BangBangCall extends SketchConstructCall;
node class HoleCall extends SketchConstructCall;

edge class PackageDefGlobal extends Subtree;

node class SketchArrayAccess extends ScAstNode;
edge class SketchArrayAccessArray extends Subtree, Cfg2SubtreeSecond;
edge class SketchArrayAccessIndex extends Subtree, Cfg2SubtreeFirst;

node class SketchArrayAssign extends ScAstNode;
edge class SketchArrayAssignArray extends Subtree;
edge class SketchArrayAssignIndex extends Subtree;
edge class SketchArrayAssignValue extends Subtree;

node class SketchPrintTuple extends ScAstNode;
edge class SketchPrintTupleName extends Subtree, Cfg2SubtreeFirst;
edge class SketchPrintTupleValue extends Subtree, Cfg2SubtreeSecond;

node class SketchTprintCall extends FcnCall;
edge class PrintCallArgList extends FcnArgList;

edge class FcnDefIsGenerator;



// === Symbol type annotations ===
abstract node class SketchAnnotation extends Annotation;
node class RangeAnnotation extends SketchAnnotation;
node class ArrayLenAnnotation extends SketchAnnotation;
node class GeneratorAnnotation extends SketchAnnotation;
node class IgnoreClassAnnotation extends Annotation;
node class OuterSymbol extends Symbol; // $outer var in inner classes

// all symbols in the "scala" package become ScalaSymbols
node class ScalaSymbol extends Symbol;
node class ScalaUnboxSymbol extends ScalaSymbol;
node class ScalaUnitTypeSymbol extends ScalaSymbol;
node class ScalaArraySymbol extends ScalaSymbol;
node class ScalaIntSymbol extends ScalaSymbol;

node class TemplateClassSymbol extends Symbol { number : int; }
// can be LHS target of a sketch construct assignment
edge class CanBeConstructAssigned;
node class RootSymbol extends Symbol;

node class FixedArraySymbol extends Symbol { value : int; }
node class VariableArraySymbol extends Symbol;
edge class SpecializedSymbolBase;



// === Intermediate nodes ===
abstract node class BlockifySafe;
node class MemberFcn extends FcnDef;
node class SketchMainFcnDef extends MemberFcn;
node class InsertedReturnSymbol extends Symbol;
// execute this statement before the given one.
node class BlockifyValDef extends ValDef;
node class ThisVarRef extends VarRef, BlockifySafe;
node class TmpSymbol extends Symbol;
node class ThisValDef extends ValDef;
edge class ObjectSymbol;
edge class ClassSymbol;

node class CudaKernelSymbol extends Symbol;
node class ParallelIndexSymbol extends Symbol;

// on fcn symbol
edge class CudaKernelFcn;

node class PhiFcn extends FcnCall;

node class List;
abstract node class ListAbstractNode;
node class ListNode extends ListAbstractNode;
node class ListFirstNode extends ListAbstractNode;
node class ListLastNode extends ListAbstractNode;
edge class ListElt;
edge class ListFirst extends ListElt;
edge class ListLast extends ListElt;
edge class ListNext;
edge class ListValue extends Replaceable;
edge class ListTmpLast;

abstract edge class TmpEdge; // for doing calculations, erase them w/ a single rewrite
abstract edge class CfgSimpleInner; // prologue connected to child's prolog, same with epil.
abstract edge class Cfg2SubtreeFirst;
abstract edge class Cfg2SubtreeSecond;

edge class ArrayLengthExpr extends Subtree;
edge class TmpArrayTypeSymbol extends ScTypeSymbol;




// ==== cfg nodes ====

abstract node class CfgAbstractNode;
abstract node class CfgEvalNode;
// normal nodes indicate normal control flow.
// further subtypes indicate how computation is carried out
// (for example, for functions, in the epilogue node).
abstract node class CfgNormalNode extends CfgAbstractNode;
abstract node class CfgDummyNode extends CfgNormalNode;
node class CfgDummyPrologueNode extends CfgDummyNode;
node class CfgEvalNormalNode extends CfgNormalNode, CfgEvalNode;
// don't create next ptrs from return stmts.
// Only for the epilogue of the return statement.
node class CfgReturnNode extends CfgAbstractNode;

edge class CfgSequentialList;

// edges from CFG nodes to CFG nodes
edge class CfgAbstractNext;
edge class CfgSequentialNext extends CfgAbstractNext;
edge class CfgNext extends CfgSequentialNext;
edge class CfgSkipSubtreeNext extends CfgSequentialNext;
// TODO -- implement more CFG edges.
edge class CfgConditionalNext extends CfgAbstractNext;
edge class CfgNextFromEval extends CfgAbstractNext;

// edges from the original AST to the CFG
abstract edge class AstCfgEdge;
edge class CfgPrologue extends AstCfgEdge;
edge class CfgEpilogue extends AstCfgEdge;
edge class CfgPrologueEpilogue extends CfgPrologue, CfgEpilogue;

// a node with [only] one CfgSequentialNext out edge,
// and only one CfgSequentialNext in edge.
edge class CfgStrictlySequentialNode;



// === cuda nodes ===

// node class CudaParallelIndex extends ScAstNode {
// parallelIndex : string; indexVector : string; }

node class CudaParallelIndexCall extends FcnCall;



abstract edge class StringRep;

// child contains all information
edge class StringRepSingleChild extends StringRep;

// a paragraph is a [document] "block", i.e. surrounded by newlines
edge class StringRepPara extends StringRep;
edge class StringRepParenBlock extends StringRep;

// an edge to a node (NStringRep..._) containing more
// information about a string representation
edge class StringRepNode extends StringRep;

// no higher level semantics like Para, ParenBlock, etc.
edge class StringRepBasicList extends StringRep;



// string representation special nodes
abstract node class NStringRep { nident : int; }
node class NStringRepIncreaseIdent extends NStringRep;
node class NStringRepDecreaseIdent extends NStringRep;
// print a newline and indent (except in the cases of double-blanks)
node class NStringRepNewLine extends NStringRep;

// separate a target list of nodes (base) and save to (elts)
node class NStringRepSepList extends NStringRep;
edge class NSRListSep;
edge class NSRListElts;
edge class NSRListBase;

node class NStringRepConstant extends NStringRep { value : string; }
node class NSRCPeriod extends NStringRepConstant { value = "."; }
node class NSRCEqualAssign extends NStringRepConstant { value = " = "; }
// literals are words (variable names, etc.) which should
// be space-separated if next to other literals
node class NStringRepLiteral extends NStringRepConstant;
abstract node class NSRSurround extends NStringRep {
    left : string; right : string; }
node class NSRParens extends NSRSurround { left = "("; right=")"; }
node class NSRBrackets extends NSRSurround { left = "["; right="]"; }
node class NSRBraces extends NSRSurround { left = "{"; right="}"; }
// parenthesis that are left in for order-of-operations,
// not required syntax (e.g. function definitions)
node class NSRSafeParens extends NSRParens;



// ==== unified modules ====

// edge class MyEdge
// node class MyNode



// edge class MyEdge
// node class MyNode






// attribute edges on ast nodes indicating that statements can be appended.
abstract node class CfgAbstractAttachable;
node class CfgAttachable extends CfgAbstractAttachable;
node class CfgImplicitAttachable extends CfgAbstractAttachable;
edge class CfgAttachableAstNode;

abstract edge class AbstractBlockify;
edge class BlockifyExpr extends AbstractBlockify;
edge class BlockifySkip extends AbstractBlockify;
edge class BlockifyNext;
edge class BlockifyAttach extends BlockifyNext; // first edge
node class BlockifySkipNode; // dummy node to maintain chain
node class TmpVarRef extends VarRef, BlockifySafe;

node class DummyBlockifyChainEndNode extends ScAstNode;



// created by the plugin
edge class GetterFcn;
edge class SetterFcn;

edge class GetterFcnField;
edge class SetterFcnField;

node class GetterFcnCall extends FcnCall;
abstract node class AbstractSketchNodeType;
node class TypeArray extends AbstractSketchNodeType;
node class TypePortal extends AbstractSketchNodeType;
node class TypePrimitive extends AbstractSketchNodeType;
node class TypeInt extends TypePrimitive;
node class TypeBoolean extends TypePrimitive;
node class TypeUnit extends TypePrimitive;
node class TypeStructRef extends AbstractSketchNodeType { typename : string; }

edge class SketchType;
// ArrayLengthExpr from TypeArray to Expression
edge class ArrayInnerTypeSymbol connect TypeArray --> Symbol;

edge class FcnBinaryCallLhs;
edge class FcnBinaryCallRhs;


edge class SKImplements;





edge class CopyTo;







edge class YcSSelected {
    print_index : int = -1;
}






edge class NodePrinted extends TmpEdge;









// edge class MyEdge
// node class MyNode
edge class ClassInitializerFcn;
edge class ClassCreatorSymbol;

// dataflow edge
node class DFRef;
node class DebugNode;
// edge from DFRef to the desired expression
abstract edge class DFExprBase;
edge class DFExpr extends DFExprBase;
edge class DFExprParams extends DFExprBase;
edge class HLArg;
node class HLArgEnd;
















edge class CalledMethod extends TmpEdge;





edge class TypeAnnotation;

node class PrimitiveIntRange extends ScAstNode;
edge class PrimitiveIntRangeFrom extends Subtree;
edge class PrimitiveIntRangeTo extends Subtree;

edge class IsUntilValue;

node class AnnotFcnDef extends MemberFcn;
edge class AnnotFcnDefConstructType;



edge class CreateTemplate;

// FcnDef <---> TemplateToExport
// prevents deletion of node
node class TemplateToExport;



// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2


// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2


// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2


// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2


// important to keep these separate from assignments, because
// * eventually, multiple symbols may be assigned / reachable
node class CfgAssign;

edge class CfgAbstractAssign;
edge class CfgAssignThisStep extends CfgAbstractAssign;
// propagated -- yield to assign this step
edge class CfgAssignPrevStep extends CfgAbstractAssign;

// valdef or assign that initialized the assignment
edge class CfgAssignAstNode;
edge class CfgAssignPossibleSymbol connect CfgAssign --> CfgAssign;
edge class CfgAssignNewSymbol;

edge class ValDefSSADefine;

edge class SSAParent connect Symbol[0:1] --> Symbol[*] { idx : int; }
edge class PhiSSAParentSymbol connect PhiFcn --> Symbol;


// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2


// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2


// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2


// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2
// add unified here




// === template nodes ===
node class TemplateParameter extends ScAstNode { template : string; name : string; }
edge class TemplateArgument { name : string; }
node class TemplateFcn extends FcnDef { template : string; }
edge class ReplaceWithTemplateFcnCall;



// === SKETCH nodes ===

node class SKHelperFcns;

// same edge classes as Block
node class SKBlock extends Block;

node class SKStmtExpr extends ScAstNode;
edge class SKStmtExprExpr;

node class SKAssertCall extends FcnCall;
edge class SKAssertCallArg extends Subtree, CfgSimpleInner;

edge class PackageDefFcn extends Subtree;

node class SKWhileLoop extends ScAstNode;
edge class SKWhileLoopCond extends Subtree;
edge class SKWhileLoopBody extends Subtree;



// === Unit test markers ===
node class ConstructAssignableClassDef extends ClassDef;
edge class CfgIsConnected;



// === Print nodes ===
edge class PrintSymName;
node class PrintName { name : string; uid : int; }
// some nodes are special identifiers; they should not
// be renamed, but they should force other nodes to avoid
// their names
node class SpecialPrintName extends PrintName;

node class PrintNoName extends PrintName; // no name

edge class PrintRep;
abstract node class PrintNode;
node class PrintTerminal extends PrintNode { value : string; }
node class PrintVarname extends PrintTerminal;
node class PrintKeyword extends PrintTerminal;
node class PrintConstruct extends PrintTerminal;
node class PrintConstant extends PrintTerminal;
node class PrintSyntactic extends PrintTerminal;
// node class PrintCollapsed extends PrintTerminal;
node class PrintCoalesced extends PrintTerminal;

node class PrintLparen extends PrintSyntactic { value = "("; }
node class PrintRparen extends PrintSyntactic { value = ")"; }
node class PrintLbraceNL extends PrintSyntactic { value = "{\n"; }
node class PrintRbrace extends PrintSyntactic { value = "}"; }

node class PrintOptionalNewline extends PrintSyntactic;

node class PrintSubtree extends PrintNode;
node class PrintSubtreeList extends PrintSubtree;
edge class PrintSep; // edge for separator chain.
// it's then very easy to, e.g., mutate the separator chain
// when it has a certain in degree.
edge class PrintSubtreeStartNext;
edge class PrintSubtreeStart extends PrintSubtreeStartNext;
edge class PrintSubtreeNext extends PrintSubtreeStartNext;

node class PrintList extends PrintNode;
edge class PrintListNext;

// reference to insert another print node.
node class PrintRef extends PrintNode;
// edge class PrintRefEdge;



// === Bad nodes for debugging ===
node class DebugBadNode;
edge class DebugBadEdge;



// === Nodes from the GXL Scala compiler plugin ===

// Scala statements (if, for, blocks, etc.) which will need
// to be translated into statements for SKETCH and
// other c-style languages
node class ScalaExprStmt extends ScAstNode;

node class Assign extends ScAstNode, ValDefOrAssign;
node class Block extends ScalaExprStmt;
node class CaseDef extends ScAstNode;
node class ClassDef extends ScAstNode;
node class EmptyTree extends ScAstNode;

node class FcnCall extends ScAstNode { decoratedName : string; }
node class FcnCallArrayGet extends FcnCall;
node class FcnCallArrayLength extends FcnCall;
node class FcnCallArraySet extends FcnCall;

node class FcnBinaryCall extends FcnCall { strop : string; }
node class FcnCallBinaryAdd extends FcnBinaryCall { strop = "+"; }
node class FcnCallBinaryMultiply extends FcnBinaryCall { strop = "*"; }
node class FcnCallBinaryDivide extends FcnBinaryCall { strop = "/"; }
node class FcnCallBinaryGreaterThan extends FcnBinaryCall { strop = ">"; }
node class FcnCallBinaryGreaterThanOrEqual extends FcnBinaryCall { strop = ">="; }
node class FcnCallBinaryLessThan extends FcnBinaryCall { strop = "<"; }
node class FcnCallBinaryLessThanOrEqual extends FcnBinaryCall { strop = "<="; }
node class FcnCallBinaryLogicAnd extends FcnBinaryCall { strop = "&"; }
node class FcnCallBinaryLogicOr extends FcnBinaryCall { strop = "|"; }
node class FcnCallBinaryBitwiseXor extends FcnBinaryCall { strop = "^"; }
node class FcnCallBinaryNotSameObj extends FcnBinaryCall { strop = "!="; }
node class FcnCallBinaryPrimitiveEquals extends FcnBinaryCall { strop = "=="; }
node class FcnCallBinaryPrimitiveNotEquals extends FcnBinaryCall { strop = "!="; }
node class FcnCallBinarySameObj extends FcnBinaryCall { strop = "=="; }
node class FcnCallBinaryStringConcat extends FcnBinaryCall { strop = "cat"; }
node class FcnCallBinarySubtract extends FcnBinaryCall { strop = "-"; }

node class FcnCallTypeApply extends FcnCall;
node class FcnCallUnaryIntCast extends FcnCall;
node class FcnCallUnaryNonzero extends FcnCall;
node class FcnCallUnaryNegative extends FcnCall;
// ctor new Array(length); cf below
node class NewArrayCall extends FcnCall;

node class FcnDef extends ScAstNode;
node class FcnSuperCall extends FcnCall;
node class FieldAccess extends ScAstNode;
node class If extends ScalaExprStmt;
// ctor Array(a, b, c, d); cf above
node class NewArray extends ScAstNode;
node class NewConstructor extends FcnCall;
node class SKNew extends ScAstNode;
node class NewAllocOnly extends ScAstNode;
node class PackageDef extends ScAstNode;
node class QualifiedClassRef extends ScAstNode;
node class Return extends ScAstNode;
node class StaticFcnCall extends FcnCall;
node class Template extends ScAstNode;
node class This extends ScAstNode;
node class Throw extends ScAstNode;
node class Try extends ScalaExprStmt;
node class Typed extends ScAstNode;
node class ValDef extends ScAstNode, ValDefOrAssign;
node class VarRef extends ScAstNode;

abstract node class Constant extends BlockifySafe, ScAstNode;

node class BooleanConstant extends Constant {
    value : boolean;
}
node class CharConstant extends Constant {
    value : string;
}
node class LongConstant extends Constant {
    value : int;
}
node class IntConstant extends Constant {
    value : int;
}
node class StringConstant extends Constant {
    value : string;
}
node class NullTypeConstant extends Constant;
node class UnitConstant extends Constant;

node class Bind extends ScAstNode;
node class GotoCall extends FcnCall;
node class LabelDef extends ScalaExprStmt;
node class Match extends ScAstNode;
node class TypeTree extends ScAstNode;
node class ApplyImplicitView extends FcnCall;
node class ApplyToImplicitArgs extends ScAstNode;



// === Edge classes ===

// these edges convey what the naming conventions already tell us
abstract edge class Replaceable;
abstract edge class AstSiblingSubtree;
abstract edge class Sibling extends AstSiblingSubtree;
abstract edge class Subtree extends AstSiblingSubtree, Replaceable;
// target of the edge should be transformed into an expression,
// not Scala expression-statement for C-style compatibility
abstract edge class CstyleExprTarget;
abstract edge class VarRefTarget extends CstyleExprTarget;
abstract edge class ScTermSymbol;
abstract edge class ScTypeSymbol;
edge class InnerTypeSymbol;

abstract edge class FcnArg extends CstyleExprTarget;
abstract edge class BlockStmt;
abstract edge class OldChainNext extends Sibling;

edge class BlockStmtChain extends BlockStmt, Subtree;
edge class BlockStmtNext extends BlockStmt, OldChainNext;
edge class FcnArgChain extends FcnArg, Subtree;
edge class FcnArgNext extends FcnArg, OldChainNext;
edge class FcnArgList extends Subtree, CstyleExprTarget, CfgSimpleInner;
edge class FcnDefParamsList extends Subtree;
edge class BlockStmtList extends Subtree, CfgSimpleInner;
edge class ArrValueList extends Subtree, CfgSimpleInner;
edge class AnnotationArgsList extends Subtree;
edge class SymbolTypeArgsList;

// Sibling edges indicate argument parameters
edge class AnnotationArgsNext extends OldChainNext;
edge class ArrValueNext extends OldChainNext;
edge class ClassDefTypeParamsNext extends OldChainNext;
edge class FcnDefParamsNext extends OldChainNext;
edge class MatchCaseNext extends OldChainNext;

// Subtree links currently include the Last edges. These
// should be removed if they become a problem.
edge class AnnotationArgsChain extends Subtree;
edge class AnnotationArgsLast;
edge class ArrValueChain extends Subtree;
edge class AssignLhs extends Subtree, Cfg2SubtreeSecond;
edge class AssignRhs extends Subtree, ValDefOrAssignRhs, Cfg2SubtreeFirst;
edge class BlockExpr extends Subtree;
edge class BlockStmtLast;
edge class CaseBody extends Subtree;
edge class CaseGuard extends Subtree;
edge class CasePattern extends Subtree;
edge class ClassDefImpl extends Subtree;
edge class ClassDefTypeParamsChain extends Subtree;
edge class ClsMethod extends Subtree;
edge class FcnArgLast;
edge class FcnBody extends Subtree, CfgSimpleInner;
edge class FcnCallTypeArgsChain extends Subtree;
edge class FcnDefParamsChain extends Subtree;
edge class FcnDefParamsLast;
edge class FcnTarget extends Subtree, CstyleExprTarget;
edge class FieldAccessObject extends Subtree, CfgSimpleInner;
edge class IfCond extends Subtree;
edge class IfElse extends Subtree;
edge class IfThen extends Subtree;
edge class MatchCaseChain extends Subtree;
edge class MatchTarget extends Subtree;
edge class PackageDefElement extends Subtree;
edge class ReturnExpr extends Subtree, CfgSimpleInner, CstyleExprTarget;
edge class StaticMember extends Subtree;
edge class SymbolAnnotation extends Subtree;
edge class TemplateElement extends Subtree;
edge class ThrowExpr extends Subtree;
edge class TypedExpression extends Subtree;
edge class ValDefRhs extends Subtree, CfgSimpleInner, ValDefOrAssignRhs;
edge class LabelDefRhs extends Subtree;

edge class ArrValueLast;
edge class FcnCallTypeArgsLast;
edge class MatchCaseLast;

// Term symbols
edge class AnnotationSymbol extends ScTermSymbol;
edge class ClassDefFieldSymbol extends ScTermSymbol;
edge class ClassDefFieldsList extends ScTermSymbol;
edge class ClassDefSymbol extends ScTermSymbol;
edge class ClassRefSymbol extends ScTermSymbol;
edge class EmptyTreeTypeSymbol extends ScTermSymbol;
edge class FcnCallSymbol extends ScTermSymbol;
edge class FcnDefSymbol extends ScTermSymbol;
edge class FieldAccessSymbol extends ScTermSymbol;
edge class LabelDefSymbol extends ScTermSymbol;
edge class NewClassSymbol extends ScTermSymbol;
edge class PackageDefSymbol extends ScTermSymbol;
edge class ReturnSymbol extends ScTermSymbol;
edge class TemplateSymbol extends ScTermSymbol;
edge class ThisSymbol extends ScTermSymbol;
edge class TypeTreeSymbol extends ScTermSymbol;
edge class ValDefSymbol extends ScTermSymbol;
edge class VarRefSymbol extends ScTermSymbol;
edge class ApplyImplicitViewSymbol extends FcnCallSymbol;
edge class ApplyToImplicitArgsSymbol extends ScTermSymbol;
edge class ClassRefTermSymbol extends ScTermSymbol;
edge class SkTemplateSymbol extends ScTermSymbol;

// Type symbols
edge class AssignTypeSymbol extends ScTypeSymbol;
edge class BlockTypeSymbol extends ScTypeSymbol;
edge class ClassDefTypeSymbol extends ScTypeSymbol;
edge class ClassRefTypeSymbol extends ScTypeSymbol;
edge class FcnCallTypeSymbol extends ScTypeSymbol;
edge class FcnDefReturnTypeSymbol extends ScTypeSymbol;
edge class FieldAccessTypeSymbol extends ScTypeSymbol;
edge class IfTypeSymbol extends ScTypeSymbol;
edge class LiteralTypeSymbol extends ScTypeSymbol;
edge class PackageDefTypeSymbol extends ScTypeSymbol;
edge class TemplateTypeSymbol extends ScTypeSymbol;
edge class ThisTypeSymbol extends ScTypeSymbol;
edge class ThrowTypeSymbol extends ScTypeSymbol;
edge class TypedTypeSymbol extends ScTypeSymbol;
edge class TypeSymbol extends ScTypeSymbol;
edge class TypeTreeTypeSymbol extends ScTypeSymbol;
edge class ValDefTypeSymbol extends ScTypeSymbol;
edge class VarRefTypeSymbol extends ScTypeSymbol;
edge class ParentTypeSymbol extends ScTypeSymbol;
edge class ApplyImplicitViewTypeSymbol extends ScTypeSymbol;
edge class ApplyToImplicitArgsTypeSymbol extends ScTypeSymbol;

// symbols...
edge class CaseDefTypeSymbol extends ScTypeSymbol;
edge class MatchTypeSymbol extends ScTypeSymbol;
edge class ReturnTypeSymbol extends ScTypeSymbol;
edge class LabelDefTypeSymbol extends ScTypeSymbol;
edge class NewArrayTypeSymbol extends ScTypeSymbol;