// -*- coding: utf-8 -*-
// author: gatoatigrado (nicholas tung) [ntung at ntung]

// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

node class HighlightValDef extends ValDef;

node class ScAstNode {
    sourceFile : string;
    scalaSource : string;
    startLine : int;
    startCol : int;
    endLine : int;
    endCol : int;
}

// N.B. -- not an AST node
node class Symbol {
    symbolName : string;
    fullSymbolName : string;
}
edge class SymbolOwner;
edge class EnclosingFcn;
edge class BridgeFcn;
node class EmptyChain extends ScAstNode;
node class Annotation;


// === SKETCH constructs ===
// special symbols. Use these!
abstract node class SketchBaseSymbol extends Symbol;
node class AngelicSketchSymbol extends SketchBaseSymbol;
node class SketchClassSymbol extends SketchBaseSymbol;
node class AssertFcnSymbol extends SketchBaseSymbol;
abstract node class SketchConstructSymbol extends SketchBaseSymbol;
node class BangBangSymbol extends SketchConstructSymbol;
node class HoleSymbol extends SketchConstructSymbol;

abstract node class SketchConstructCall extends ScAstNode, BlockifySafe;
node class BangBangCall extends SketchConstructCall;
node class HoleCall extends SketchConstructCall;

edge class PackageDefGlobal extends Subtree;



// === Symbol type annotations ===
abstract node class SketchAnnotation extends Annotation;
node class StaticSketchAnnotation extends SketchAnnotation;
node class IgnoreClassAnnotation extends Annotation;
node class OuterSymbol extends Symbol;
node class ScalaUnboxSymbol extends ScalaSymbol;
node class ScalaUnitTypeSymbol extends ScalaSymbol;
// can be LHS target of a sketch construct assignment
edge class CanBeConstructAssigned;



// === Scala symbols ===
// all symbols in the "scala" package become ScalaSymbols
node class ScalaSymbol extends Symbol;



// === Intermediate nodes ===
abstract node class BlockifySafe;
node class MemberFcn extends FcnDef;
node class SketchMainFcnDef extends MemberFcn;
node class InsertedReturnSymbol extends Symbol;
// execute this statement before the given one.
node class BlockifyValDef extends ValDef;
node class ThisVarRef extends VarRef, BlockifySafe;
node class TmpSymbol extends Symbol;

// ==== Scala statement-expressions to blocks ====


// ==== unified modules ====
{% include "nodes/gen/blockify_fcndefs.gm" %}
{% include "nodes/gen/generate_cfg.gm" %}
{% include "nodes/gen/cstyle_stmts.gm" %}
{% include "nodes/gen/cleanup_accessors.gm" %}
{% include "nodes/gen/sketch_final_minor_cleanup.gm" %}



// === Intermediate nodes ===
node class List;
abstract node class ListAbstractNode;
node class ListNode extends ListAbstractNode;
node class ListFirstNode extends ListAbstractNode;
node class ListLastNode extends ListAbstractNode;
edge class ListElt;
edge class ListFirst extends ListElt;
edge class ListLast extends ListElt;
edge class ListNext;
edge class ListValue;
edge class ListTmpLast;



// === SKETCH nodes ===

node class SKRoot;
node class SKHelperFcns;

node class SKAssert extends ScAstNode;
edge class SKAssertExpr;

// same edge classes as Block
node class SKBlock extends Block;



// === Unit test markers ===
node class ConstructAssignableClassDef extends ClassDef;
edge class CfgIsConnected;



// === Print nodes ===
edge class PrintSymName;

node class PrintRenamer { base : string; suffixCtr : int; }
node class PrintName { name : string; }

node class PrintNoName extends PrintName; // no name
node class PrintNameFactory;

edge class PrintRep;
abstract node class PrintNode;
node class PrintTerminal extends PrintNode { value : string; }
node class PrintVarname extends PrintTerminal;
node class PrintKeyword extends PrintTerminal;
node class PrintConstruct extends PrintTerminal;
node class PrintConstant extends PrintTerminal;
node class PrintSyntactic extends PrintTerminal;
// node class PrintCollapsed extends PrintTerminal;
node class PrintCoalesced extends PrintTerminal;

node class PrintLparen extends PrintSyntactic { value = "("; }
node class PrintRparen extends PrintSyntactic { value = ")"; }
node class PrintLbraceNL extends PrintSyntactic { value = "{\n"; }
node class PrintRbrace extends PrintSyntactic { value = "}"; }

node class PrintOptionalNewline extends PrintSyntactic;

node class PrintSubtree extends PrintNode;
node class PrintSubtreeList extends PrintSubtree;
edge class PrintSep; // edge for separator chain.
// it's then very easy to, e.g., mutate the separator chain
// when it has a certain in degree.
edge class PrintSubtreeStartNext;
edge class PrintSubtreeStart extends PrintSubtreeStartNext;
edge class PrintSubtreeNext extends PrintSubtreeStartNext;

node class PrintList extends PrintNode;
edge class PrintListNext;

// reference to insert another print node.
node class PrintRef extends PrintNode;
// edge class PrintRefEdge;



// === Bad nodes for debugging ===
node class DebugBadNode;
edge class DebugBadEdge;



// === Nodes from the GXL Scala compiler plugin ===

// Scala statements (if, for, blocks, etc.) which will need
// to be translated into statements for SKETCH and
// other c-style languages
node class ScalaExprStmt extends ScAstNode;

node class Assign extends ScAstNode;
node class Block extends ScalaExprStmt;
node class CaseDef extends ScAstNode;
node class ClassDef extends ScAstNode;
node class EmptyTree extends ScAstNode;

node class FcnCall extends ScAstNode;
node class FcnCallArrayGet extends FcnCall;
node class FcnCallArrayLength extends FcnCall;
node class FcnCallArraySet extends FcnCall;

node class FcnBinaryCall extends FcnCall { binop : int; }
{% macro sk_binop(name, n) %}
node class FcnCallBinary{{ name }} extends FcnBinaryCall { binop = {{ 2 ** n }}; }
{%- endmacro %}
{{ sk_binop("Add", 1) }}
{{ sk_binop("Divide", 4) }}
{{ sk_binop("GreaterThan", 15) }}
{{ sk_binop("GreaterThanOrEqual", 16) }}
{{ sk_binop("LessThan", 13) }}
{{ sk_binop("LessThanOrEqual", 14) }}
{{ sk_binop("LogicAnd", 6) }}
{{ sk_binop("LogicOr", 7) }}
{{ sk_binop("NotSameObj", 12) }}
{{ sk_binop("PrimitiveEquals", 11) }}
{{ sk_binop("PrimitiveNotEquals", 12) }}
{{ sk_binop("SameObj", 11) }}
{{ sk_binop("StringConcat", 0) }}
{{ sk_binop("Subtract", 2) }}

node class FcnCallTypeApply extends FcnCall;
node class FcnCallUnaryIntCast extends FcnCall;
node class FcnCallUnaryNonzero extends FcnCall;
node class NewArrayCall extends FcnCall;

node class FcnDef extends ScAstNode;
node class FcnSuperCall extends FcnCall;
node class FieldAccess extends ScAstNode;
node class If extends ScalaExprStmt;
node class NewArray extends ScAstNode;
node class NewConstructor extends FcnCall;
node class PackageDef extends ScAstNode;
node class QualifiedClassRef extends ScAstNode;
node class Return extends ScAstNode;
node class StaticFcnCall extends FcnCall;
node class Template extends ScAstNode;
node class This extends ScAstNode;
node class Throw extends ScAstNode;
node class Try extends ScalaExprStmt;
node class Typed extends ScAstNode;
node class ValDef extends ScAstNode;
node class VarRef extends ScAstNode;

abstract node class Constant extends BlockifySafe, ScAstNode;

node class BooleanConstant extends Constant {
    value : boolean;
}
node class CharConstant extends Constant {
    value : string;
}
node class LongConstant extends Constant {
    value : int;
}
node class IntConstant extends Constant {
    value : int;
}
node class StringConstant extends Constant {
    value : string;
}
node class NullTypeConstant extends Constant;
node class UnitConstant extends Constant;

node class Bind extends ScAstNode;
node class GotoCall extends ScAstNode;
node class LabelDef extends ScalaExprStmt;
node class Match extends ScAstNode;
node class TypeTree extends ScAstNode;



// === Edge classes ===

// these edges convey what the naming conventions already tell us
abstract edge class AstSiblingSubtree;
abstract edge class Sibling extends AstSiblingSubtree;
abstract edge class Subtree extends AstSiblingSubtree;
// target of the edge should be transformed into an expression,
// not Scala expression-statement for C-style compatibility
abstract edge class CstyleExprTarget;
abstract edge class VarRefTarget extends CstyleExprTarget;
abstract edge class ScTermSymbol;
abstract edge class ScTypeSymbol;

abstract edge class FcnArg extends CstyleExprTarget;
abstract edge class BlockStmt;

edge class BlockStmtChain extends BlockStmt, Subtree;
edge class BlockStmtNext extends BlockStmt, Sibling;
edge class FcnArgChain extends FcnArg, Subtree;
edge class FcnArgNext extends FcnArg, Sibling;
edge class FcnArgList extends Subtree, CstyleExprTarget;
edge class FcnDefParamsList extends Subtree;
edge class BlockStmtList extends Subtree;

// Sibling edges indicate argument parameters
edge class AnnotationArgsNext extends Sibling;
edge class ArrValueNext extends Sibling;
edge class ClassDefTypeParamsNext extends Sibling;
edge class FcnDefParamsNext extends Sibling;
edge class MatchCaseNext extends Sibling;

// Subtree links currently include the Last edges. These
// should be removed if they become a problem.
edge class AnnotationArgsChain extends Subtree;
edge class AnnotationArgsLast extends Subtree;
edge class ArrValueChain extends Subtree;
edge class AssignLhs extends Subtree;
edge class AssignRhs extends Subtree;
edge class BlockExpr extends Subtree;
edge class BlockStmtLast extends Subtree;
edge class CaseBody extends Subtree;
edge class CaseGuard extends Subtree;
edge class CasePattern extends Subtree;
edge class ClassDefImpl extends Subtree;
edge class ClassDefTypeParamsChain extends Subtree;
edge class ClsMethod extends Subtree;
edge class FcnArgLast extends Subtree;
edge class FcnBody extends Subtree;
edge class FcnCallTypeArgsChain extends Subtree;
edge class FcnDefParamsChain extends Subtree;
edge class FcnDefParamsLast extends Subtree;
edge class FcnTarget extends Subtree, CstyleExprTarget;
edge class FieldAccessObject extends Subtree;
edge class IfCond extends Subtree;
edge class IfElse extends Subtree;
edge class IfThen extends Subtree;
edge class MatchCaseChain extends Subtree;
edge class MatchTarget extends Subtree;
edge class PackageDefElement extends Subtree;
edge class ReturnExpr extends Subtree;
edge class StaticMember extends Subtree;
edge class SymbolAnnotation extends Subtree;
edge class TemplateElement extends Subtree;
edge class ThrowExpr extends Subtree;
edge class TypedExpression extends Subtree;
edge class ValDefRhs extends Subtree;

edge class ArrValueLast extends Subtree;
edge class FcnCallTypeArgsLast extends Subtree;
edge class MatchCaseLast extends Subtree;

// Term symbols
edge class AnnotationSymbol extends ScTermSymbol;
edge class ClassDefFieldSymbol extends ScTermSymbol;
edge class ClassDefFieldsList extends ScTermSymbol;
edge class ClassDefSymbol extends ScTermSymbol;
edge class ClassRefSymbol extends ScTermSymbol;
edge class EmptyTreeTypeSymbol extends ScTermSymbol;
edge class FcnCallSymbol extends ScTermSymbol;
edge class FcnDefSymbol extends ScTermSymbol;
edge class LabelDefSymbol extends ScTermSymbol;
edge class NewClassSymbol extends ScTermSymbol;
edge class PackageDefSymbol extends ScTermSymbol;
edge class ReturnSymbol extends ScTermSymbol;
edge class TemplateSymbol extends ScTermSymbol;
edge class ThisSymbol extends ScTermSymbol;
edge class TypeTreeSymbol extends ScTermSymbol;
edge class ValDefSymbol extends ScTermSymbol;
edge class VarRefSymbol extends ScTermSymbol;
edge class ClassRefTermSymbol extends ScTermSymbol;

// Type symbols
edge class AssignTypeSymbol extends ScTypeSymbol;
edge class BlockTypeSymbol extends ScTypeSymbol;
edge class ClassDefTypeSymbol extends ScTypeSymbol;
edge class ClassRefTypeSymbol extends ScTypeSymbol;
edge class FcnCallTypeSymbol extends ScTypeSymbol;
edge class FcnDefTypeSymbol extends ScTypeSymbol;
edge class FcnDefReturnTypeSymbol extends ScTypeSymbol;
edge class IfTypeSymbol extends ScTypeSymbol;
edge class LiteralTypeSymbol extends ScTypeSymbol;
edge class PackageDefTypeSymbol extends ScTypeSymbol;
edge class TemplateTypeSymbol extends ScTypeSymbol;
edge class ThisTypeSymbol extends ScTypeSymbol;
edge class ThrowTypeSymbol extends ScTypeSymbol;
edge class TypedTypeSymbol extends ScTypeSymbol;
edge class TypeSymbol extends ScTypeSymbol;
edge class TypeTreeTypeSymbol extends ScTypeSymbol;
edge class ValDefTypeSymbol extends ScTypeSymbol;
edge class VarRefTypeSymbol extends ScTypeSymbol;
edge class ParentTypeSymbol extends ScTypeSymbol;

// symbols...
edge class CaseDefTypeSymbol extends ScTypeSymbol;
edge class MatchTypeSymbol extends ScTypeSymbol;
edge class ReturnTypeSymbol extends ScTypeSymbol;
edge class LabelDefTypeSymbol extends ScTypeSymbol;
edge class NewArrayTypeSymbol extends ScTypeSymbol;
