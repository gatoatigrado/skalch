
rule assertFalse(var msg : string) {
    modify { emit("[GRG ASSERT FAILURE] " + msg + "\n"); }
}

rule assertFalseNoNewline(var msg : string) {
    modify { emit("[GRG ASSERT FAILURE] " + msg); }
}

rule highlightValDef {
    vd:ValDef;
    if { vd.startLine == 10 && vd.startCol == 20; }
    modify { next:HighlightValDef<vd>; }
}

/// use in xgrs rules
rule print(var x : string) { modify { emit(x); } }

rule printn(x : Node) { modify { emit(x); } }

rule deleteNode(x : Node) { modify { delete(x); } }

/// grab the parent of a node
pattern TreeReplacer(y:ScAstNode) replace (next:Node) {
    x:Node -e:Replaceable-> y;

    replace {
        y; x -:typeof(e)-> next;
    }
}

/// statements that are within the body of e.g. a function or if stmt
pattern BodyStatement(x:ScAstNode) {
    blk:Block -:BlockStmtList-> :List -:ListElt->
        :ListNode -:ListValue-> x;
}

pattern FcnBodyStatement(fcn:FcnDef, x:ScAstNode) {
     fcn -:FcnBody-> blk:Block -:BlockStmtList-> :List -:ListElt->
        :ListNode -:ListValue-> x;
}

pattern IsLastNode(x:ScAstNode) {
    lstnode:ListNode -:ListValue-> x;
    lstnode -:ListNext-> :ListLastNode;
}
