// -*- coding: utf-8 -*-
// author: gatoatigrado (nicholas tung) [ntung at ntung]

// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

// coalesce graph nodes

rule printDeleteLastRefs {
    x:PrintRef -:PrintSep-> y:PrintNode;
    negative { x; y; y --> z:PrintNode; }
    modify {
        delete(x);
    }
}

rule printInsertSpaces {
    x:PrintTerminal -e:PrintListNext-> y:PrintTerminal;
    negative { if { typeof(x) >= PrintSyntactic; } }
    negative { if { typeof(y) >= PrintSyntactic; } }
    modify {
        delete(e);
        x -:PrintListNext-> whitespace:PrintSyntactic
            -:PrintListNext-> y;
        eval {
            whitespace.value = " ";
        }
    }
}

rule printSetInitialCoalesced {
    first:PrintTerminal;
    negative { if { typeof(first) == PrintCoalesced; } }
    negative { first --> :PrintNode; }
    modify {
        next:PrintCoalesced<first>;
    }
}

rule printListLastCoalesce {
    x:PrintTerminal -e:PrintListNext-> y:PrintCoalesced;
    modify {
        delete(e);
        next:PrintCoalesced<x>;
        eval {
            next.value = next.value + y.value;
        }
    }
}

rule printRefCoalesce {
    x:PrintRef -e:PrintSep-> sep:PrintCoalesced;
    negative { sep; sep --> :PrintNode; }
    modify {
        delete(e);
        next:PrintCoalesced<x>;
        eval {
            next.value = next.value + sep.value;
        }
    }
}

rule printMarkBadNodes {
    x:PrintNode;
//     negative { x; x --> z:PrintNode; }
    negative { x; z:PrintNode --> x; }
    negative { x --> :DebugBadNode; }
    modify {
        x --> :DebugBadNode;
    }
}
