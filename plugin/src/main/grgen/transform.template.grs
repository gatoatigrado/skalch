# grshell script
# preprocessed with Jinja2
# http://jinja.pocoo.org/2/documentation/
# hg clone http://dev.pocoo.org/hg/jinja2-main jinja2
new graph "AllRules.grg"
import "{{ gxl_file }}" ScalaAstModel.gm
select actions lgsp-AllRulesActions.dll



# node colors for printing
# colors:
# Default Black Blue Green Cyan Red Purple Brown Grey LightGrey LightBlue
# LightGreen LightCyan LightRed LightPurple Yellow White DarkBlue DarkRed
# DarkGreen DarkYellow DarkMagenta DarkCyan Gold Lilac
# Aquamarine Khaki Pink Orange Orchid
debug set layout Compilergraph
debug set layout option CREATE_LOOP_TREE false
dump set node ScalaExprStmt color lilac
dump set node MemberFcn color green
dump set node ClassDef color red
dump set node SketchConstructSymbol color gold
dump set node SketchConstructCall color orange
dump set node Symbol color blue
dump set node Annotation color orchid
dump set node TmpSymbol color LightRed
dump set node BlockifyValDef color LightBlue
dump set node TmpVarRef color LightCyan
dump set node CfgAbstractNode color LightGreen
dump set edge CfgAbstractNext color DarkGreen
dump set edge AbstractBlockify color DarkRed
dump set node HighlightValDef color Black
dump set node PrintNode color DarkBlue
dump set node DebugBadNode color Red



include "stages-scripts/delete_marked_ignore.grs"
include "stages-scripts/decorate.grs"
include "stages-scripts/convert_this.grs"
include "stages-scripts/clean_sketch_constructs.grs"
xgrs deleteDangling*
include "stages-scripts/local_simplifications.grs"
include "stages-scripts/cstyle_stmts.grs"

xgrs setSymbolNames*

# @ generate command, run in dir of this file
# grep -oE '^rule print([a-zA-Z0-9]+)' rules/print_graph/create_graph.grg | awk '{ printf("%s+ | ", $2); }' | sed -r 's/^/xgrs \(/g; s/ \| $/\)\*/g'
# @ begin generate block
xgrs (printVarRef+ | printBangBangCall+ | printHoleCall+ | printValDef+ | printBooleanConstant+ | printIntConstant+ | printEmptyValDef+ | printFcn+ | printIf+ | printAssign+ | printFcnDef+ | printSKBlock+ | printBlock+ | printFcnArgNext+)*
# @ end generate block

# xgrs deleteLastRefs*
xgrs printSetInitialCoalesced*
# xgrs printRepCoalesce*

# xgrs deletePrinted*
# xgrs printEverything

{% if output_file %}
export "{{ output_file }}"
{% endif %}
{% if ycomp %}
# show graph ycomp "--dolayout"
debug enable
{% else %}
exit
{% endif %}
