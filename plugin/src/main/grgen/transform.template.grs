# grshell script
# preprocessed with Jinja2
# http://jinja.pocoo.org/2/documentation/
# hg clone http://dev.pocoo.org/hg/jinja2-main jinja2
new graph "AllRules.grg"
import "{{ gxl_file }}" ScalaAstModel.gm
select actions lgsp-AllRulesActions.dll

{% set getSelCode = None %}
{% if ycomp_selection or get_sel_info %}
{% macro getSelCode() %}
    xgrs YcSmarkSelection({{ left_sel[0] }}, {{ left_sel[1] }}, {{ right_sel[0] }}, {{ right_sel[1] }})*
    xgrs YcSextendSelectionToSubtrees*
    xgrs YcSdeleteUnselected*
    {% if get_sel_info %}
        xgrs YcSdeleteDangling*
        include "stages-scripts/gen/get_selection_info.grs"
        exit
    {% endif %}
{% endmacro %}
{% endif %}

# node colors for printing
# colors:
# Default Black Blue Green Cyan Red Purple Brown Grey LightGrey LightBlue
# LightGreen LightCyan LightRed LightPurple Yellow White DarkBlue DarkRed
# DarkGreen DarkYellow DarkMagenta DarkCyan Gold Lilac
# Aquamarine Khaki Pink Orange Orchid
debug set layout Compilergraph
debug set layout option CREATE_LOOP_TREE false
dump set node ScalaExprStmt color lilac
dump set node FcnDef color green
dump set node ClassDef color red
dump set node SketchConstructSymbol color gold
dump set node SketchConstructCall color orange
dump set node Symbol color blue
dump set node Annotation color orchid
dump set node TmpSymbol color LightRed
dump set node BlockifyValDef color LightBlue
dump set node TmpVarRef color LightCyan
dump set node CfgAbstractNode color LightGreen
dump set edge CfgAbstractNext color DarkGreen
dump set edge AbstractBlockify color DarkRed
dump set node HighlightValDef color Black
dump set node PrintNode color DarkBlue
dump set node DebugBadNode color Red

dump set node List color Grey
dump set node ListNode color Grey
dump set node ListFirstNode color LightGrey
dump set node ListLastNode color LightGrey

include "stages-scripts/gen/warn_unsupported.grs"
include "stages-scripts/delete_marked_ignore.grs"
include "stages-scripts/decorate.grs"
include "stages-scripts/convert_this.grs"
include "stages-scripts/gen/cleanup_accessors.grs"

include "stages-scripts/clean_sketch_constructs.grs"
include "stages-scripts/gen/blockify_fcndefs.grs"
include "stages-scripts/gen/nice_lists.grs"
include "stages-scripts/gen/cstyle_stmts.grs"
include "stages-scripts/gen/cstyle_assns.grs" # final part of cstyle lowering

# === final code ===
{{ getSelCode() if getSelCode else "" }}
{% if (not getSelCode) or getSelRunFinal %}
    include "stages-scripts/gen/sketch_nospec.grs"
    include "stages-scripts/gen/sketch_final_minor_cleanup.grs"
{% endif %}

# === usually used if ycomp is not used ===
{% if output_file %}
    echo "saving to {{ output_file }}"
    export "{{ output_file }}"
{% endif %}

# === visualize the graph with the internal visualization tool ===
echo "[REWRITE PRODUCTION] ycomp visualization"
{% if ycomp %}
    # include "stages-scripts/gen/ycomp_remove_indirect_symbols.grs"
    xgrs {{ "YcS" if ycomp_selection else "" }}deleteDangling*

    show num nodes
    show num edges

    echo "[REWRITE PRODUCTION] executing debug enable"
    # atm. search works in this mode but other things don't
    # show graph ycomp "--dolayout"
    debug enable
{% else %}
    exit
{% endif %}
