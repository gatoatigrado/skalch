{% import "macros.grg" as macros with context %}

{% block comment %}
// author: gatoatigrado (nicholas tung) [ntung at ntung]
// 
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .
// 
// desugar scala arrays. they have strange forms, like
// scala.Array.apply(1, scala.this.Predef.wrapIntArray(Array[Int]{2, 4}))
{% endblock %}

{% block gm %}
{% endblock %}



{% block grg %}

rule countNewArrayElts {
    x:NewArray -:ArrValueList-> lst:List;
    negative { x -:ArrayLengthExpr-> .; }
    modify {
        x -:ArrayLengthExpr-> y:IntConstant;
        eval { y.value = 0; }
        exec(countList(lst, y));
    }
}

/// Array.apply(1, WrappedArray({2, 3})) -> Array.apply(1, {2, 3})
rule deleteWrapNewArray {
    parent:Node -e:Replaceable->
        x:FcnCall -:FcnCallTypeSymbol-> wrappedsym:Symbol;
    if { wrappedsym.symbolName == "WrappedArray"; }
    x -:FcnArgList-> {{ macros.finiteList([":QualifiedClassRef", "z:NewArray"]) }}
    modify { delete(e); parent -:typeof(e)-> z; }
}

/// Array.apply(1, {2, 3}) -> Array({1, 2, 3})
rule simplifyArrayConstructors {
    parent:Node -e:Replaceable->
        x:FcnCall -:FcnCallSymbol-> sym:Symbol
        -:SymbolOwner-> arrobj:Symbol;
    arrobj -:ObjectSymbol-> arrobj;

    x -:FcnArgList-> {{ macros.finiteList([":QualifiedClassRef",
        "y:ScAstNode", "z:NewArray"]) }}
    z -:ArrValueList-> prev_lst:List;
    z -:ArrayLengthExpr-> lenexpr:IntConstant;

    if { sym.fullSymbolName == "scala.Array.apply"; }

    modify {
        delete(e);
        parent -:typeof(e)-> z;
        eval { lenexpr.value = lenexpr.value + 1; }
        exec(listInsertFirst(prev_lst, y));
    }
}

rule simplifyVarLenArrayCtors {
    x:NewArrayCall -:FcnArgList->
        {{ macros.finiteList(["y:ScAstNode"]) }}

    negative { x -:ArrayLengthExpr-> .; }
    modify {
        x -:ArrayLengthExpr-> y;
    }
}

/// replace FcnCallArrayGet with SketchArrayAccess
/// so it's distinguished from function calls, since
/// SKETCH differentiates between function calls and array
/// accesses. No information loss, so it should be easy to reverse.
rule decorateArrayGet {
    x:FcnCallArrayGet -e:FcnArgList->
        {{ macros.finiteList(["array:ScAstNode", "idx:ScAstNode"]) }}

    modify {
        delete(e);
        access:SketchArrayAccess<x>;
        access -:SketchArrayAccessArray-> array;
        access -:SketchArrayAccessIndex-> idx;
    }
}

rule decorateArraySet {
    x:FcnCallArraySet -e:FcnArgList-> {{ macros.finiteList(
        ["array:ScAstNode", "idx:ScAstNode", "value:ScAstNode"]) }}

    modify {
        delete(e);
        assign:SketchArrayAssign<x>;
        assign -:SketchArrayAssignArray-> array;
        assign -:SketchArrayAssignIndex-> idx;
        assign -:SketchArrayAssignValue-> value;
    }
}




//--------------------------------------------------
// fixed-length array symbols
//-------------------------------------------------- 
pattern GetFixedArraySymbol(z:FixedArraySymbol, inner:Symbol, var value:int) {
        z -:SymbolTypeArgsList->
            {{ macros.finiteList(["inner"]) }}
        if { z.value == value; }
}

/// pattern b/c called from annotations
pattern CreateFixedArraySymbol(x:ScalaArraySymbol, inner:Symbol, var value:int) {
    negative {
        z:FixedArraySymbol;
        :GetFixedArraySymbol(z, inner, value);
    }

    modify {
        z:FixedArraySymbol -:SymbolOwner-> x;
        z -:SpecializedSymbolBase-> x;
        z -:SymbolTypeArgsList-> {{ macros.finiteListInit(["inner"]) }}
        eval {
            z.fullSymbolName = "array[" + inner.symbolName + "][" + value + "]";
            z.symbolName = "array[" + inner.symbolName + "][" + value + "]";
            z.simpleName = "array[" + inner.symbolName + "][" + value + "]";
            z.uniqueSymbolName = "array[" + inner.symbolName + "][" + value + "]";
            z.value = value;
        }
    }
}

/// create symbols representing specialized array lengths,
/// e.g. "int[3]"
rule createArrayLengthSyms {
    w:Node -:ArrayLengthExpr-> y:IntConstant;
    x:ScalaArraySymbol -:ClassSymbol-> x;
    x -:TypeSymbol-> x;
    w -:InnerTypeSymbol-> m:Symbol;
    hom(m, x);

    c:CreateFixedArraySymbol(x, m, y.value);

    modify { c(); }
}

/// redirect type symbols from new arrays to their
/// specialized versions
rule typifyConstLenArrays {
    x:Node -e:Edge-> sym:ScalaArraySymbol;
    x -:ArrayLengthExpr-> y:IntConstant;
    x -:InnerTypeSymbol-> inner:Symbol;
    z:FixedArraySymbol;
    :GetFixedArraySymbol(z, inner, y.value);

    alternative {
        A {
            if { typeof(x) == NewArray; }
            modify { x -:NewArrayTypeSymbol-> z; } }
        B {
            if { typeof(x) == NewArrayCall; }
            modify { x -:FcnCallTypeSymbol-> z; } }
    }

    modify { delete(e); }
}



//--------------------------------------------------
// variable-length array symbols
//-------------------------------------------------- 
pattern GetVariableArraySymbol(z:VariableArraySymbol, inner:Symbol) {
    z -:SymbolTypeArgsList-> {{ macros.finiteList(["inner"]) }}
}

/// pattern b/c called from annotations
pattern CreateVariableArraySymbol(x:ScalaArraySymbol, inner:Symbol) {
    negative {
        z:VariableArraySymbol;
        :GetVariableArraySymbol(z, inner);
    }

    modify {
        z:VariableArraySymbol -:SymbolOwner-> x;
        z -:SpecializedSymbolBase-> x;
        z -:SymbolTypeArgsList-> {{ macros.finiteListInit(["inner"]) }}
        eval {
            z.fullSymbolName = "VLArray[" + inner.symbolName + "]";
            z.symbolName = "VLArray[" + inner.symbolName + "]";
            z.simpleName = "VLArray[" + inner.symbolName + "]";
            z.uniqueSymbolName = "VLArray[" + inner.symbolName + "]";
        }
    }
}

rule createVariableArraySyms {
    sym:Symbol -:SymbolTypeArgsList->
        {{ macros.finiteList(["inner:Symbol"]) }}
    sym -:ScTypeSymbol-> arraysym:ScalaArraySymbol;
    hom(inner, arraysym);
    c:CreateVariableArraySymbol(arraysym, inner);

    modify { c(); }
}

rule typifyVariableLenArrays {
    sym:Symbol -:SymbolTypeArgsList->
        {{ macros.finiteList(["inner:Symbol"]) }}
    sym -e:ScTypeSymbol-> arraysym:ScalaArraySymbol;
    hom(inner, arraysym);

    z:VariableArraySymbol;
    :GetVariableArraySymbol(z, inner);

    modify {
        delete(e);
        sym -:typeof(e)-> z;
    }
}



//--------------------------------------------------
// update types of other ast nodes
// which may not have gotten the SymbolTypeArgsList
// or InnerTypeSymbol edges
//-------------------------------------------------- 
/// TODO -- move to another file
rule updateAssignLhsTypes {
    x:Assign -:AssignRhs-> y:ScAstNode;
    y -:ScTypeSymbol-> newsym:Symbol;

    x -:AssignLhs-> z:ScAstNode;
    z -e:ScTypeSymbol-> oldsym:Symbol;
    // automatically different from isomorphic matching

    modify {
        delete(e);
        z -:typeof(e)-> newsym;
    }
}

rule updateValDefSymbolTypes {
    x:ValDef -:ValDefSymbol-> sym:Symbol;
    sym -e:TypeSymbol-> .;

    x -:ValDefRhs-> y:ScAstNode;
    y -:ScTypeSymbol-> newsym:Symbol;

    modify {
        delete(e);
        sym -:typeof(e)-> newsym;
    }
}

rule updateVarRefTypes {
    x:VarRef -:VarRefSymbol-> sym:Symbol;
    sym -:TypeSymbol-> z:Symbol;
    x -e:VarRefTypeSymbol-> w:Symbol;

    modify {
        delete(e);
        x -:typeof(e)-> z;
    }
}

{% endblock %}
