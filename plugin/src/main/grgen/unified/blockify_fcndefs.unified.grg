{% import "macros.grg" as macros with context %}

{% block comment %}
// author: gatoatigrado (nicholas tung) [ntung at ntung]
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .
//
// create blocks for all function bodies.
{% endblock %}

{% block grg %}
/// change f(x) = x to f(x) = { x }
rule createFunctionBlocks {
    x:FcnDef -fcn_body:FcnBody-> y:ScAstNode;
    x -:FcnDefReturnTypeSymbol-> z:Symbol;
    negative { if { typeof(y) >= Block; } }

    modify {
        delete(fcn_body);

        x -:FcnBody-> block:SKBlock;
        block -:BlockStmtList-> {{ macros.finiteListInit(
            ["ret:Return"]) }}
        ret -:ReturnExpr-> y;

        ret -:ReturnTypeSymbol-> z;
        block -:BlockTypeSymbol-> z;

        eval {
            {{ macros.copySrcPosition("y", ["ret", "block"]) }}
        }
    }
}

// NOTE -- use of BlockStmtLast is discouraged, use the list
// pattern matchers (IsListLastNode) instead
rule retypeBlockSKBlock {
    :FcnDef -:FcnBody-> block:Block -:BlockTypeSymbol-> blk_typ:Symbol;
    if { typeof(block) == Block; }

    alternative {
        UnitType {
            if { typeof(blk_typ) >= ScalaUnitTypeSymbol; }
            modify {
                next_block:SKBlock<block>;
            }
        }
        Typed {
            block -:BlockExpr-> lastnode:ListNode;
            lastnode -e:ListValue-> retval:ScAstNode;

            negative { if { typeof(blk_typ) >= ScalaUnitTypeSymbol; } }
            modify {
                next_block:SKBlock<block>;
                delete(e);
                lastnode -:ListValue-> ret:Return -:ReturnTypeSymbol-> blk_typ;
                // -:ReturnSymbol-> :InsertedReturnSymbol -:TypeSymbol-> blk_typ;
                ret -:ReturnExpr-> retval;
            }
        }
    }
    modify { }
}

rule deleteFcnBlockEmptyTrees {
    x:FcnDef -:FcnBody-> blk:SKBlock;
    blk -:BlockStmtChain-> et:EmptyTree
        -:BlockStmtNext-> y:ScAstNode;
    modify {
        delete(et);
        blk -:BlockStmtChain-> y;
    }
}

rule setConstructDomainSize {
    x:SketchConstructCall -e:TypeAnnotation->
        annot:Annotation -:AnnotationArgsList-> args:List;
    inner:IntConstant;
    :SingletonList(args, inner);
    if { annot.typename == "RewriteTemplates$ConstructDomainSize"; }

    modify {
        delete(e);
        eval { x.domainsize = inner.value; }
    }
}

test existsFcnNonBlockBody {
    x:FcnDef -:FcnBody-> y:ScAstNode \ SKBlock;
}
{% endblock %}
