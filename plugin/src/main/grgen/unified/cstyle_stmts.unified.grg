{% block comment %}
// -*- coding: utf-8 -*-
// author: gatoatigrado (nicholas tung) [ntung at ntung]

// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

// === README ===
// The current rewrites
//      (a) Create assignments to temporary variables
//      (b) The blocks know how to
{% endblock %}
{% block gm %}
// attribute edges on ast nodes indicating that statements can be appended.
abstract node class CfgAbstractAttachable;
node class CfgAttachable extends CfgAbstractAttachable;
node class CfgImplicitAttachable extends CfgAbstractAttachable;
edge class CfgAttachableAstNode;

abstract edge class AbstractBlockify;
edge class BlockifyExpr extends AbstractBlockify;
edge class BlockifySkip extends AbstractBlockify;
edge class BlockifyNext;
edge class BlockifyAttach extends BlockifyNext; // first edge
node class BlockifySkipNode; // dummy node to maintain chain
node class TmpVarRef extends VarRef, BlockifySafe;

node class DummyBlockifyChainEndNode extends ScAstNode;
{% endblock %}



{% block grg %}
rule connectAttachPt (attach_pt:CfgAbstractAttachable,
        prologue:CfgAbstractNode, x:Node)
{
    modify {
        attach_pt -:CfgAttachableAstNode-> x;
        attach_pt -:CfgNext-> prologue;
    }
}

rule redirectThroughAttachPt(attach_pt:CfgAbstractAttachable,
        prologue:CfgAbstractNode)
{
    x:Node -e:CfgAbstractNext-> prologue;
    modify {
        delete(e);
        x -:typeof(e)-> attach_pt; // connected to prologue later (only 1 time also)
    }
}



// STEP 1: Mark AST nodes as attachable (statements may be appended)
rule setAttachableMemberFcns {
    x:FcnDef -:FcnBody-> body:ScAstNode -:CfgPrologue-> prologue:CfgAbstractNode;
    negative { :CfgImplicitAttachable -:CfgAbstractNext-> prologue; }
    modify {
        attach_pt:CfgImplicitAttachable;
        exec((redirectThroughAttachPt(attach_pt, prologue)*
            & connectAttachPt(attach_pt, prologue, x)) ||
            assertFalse("setAttachableMemberFcns failed"));
    }
}

rule setAttachableBlocks {
    x:Block -:BlockStmtList-> lst:List -:ListElt-> lst_node:ListNode
        -:ListValue-> lst_value:ScAstNode -:CfgPrologue-> prologue:CfgAbstractNode;
    negative { :CfgAbstractAttachable -:CfgAbstractNext-> prologue; }
    modify {
        attach_pt:CfgAttachable;
        exec((redirectThroughAttachPt(attach_pt, prologue)*
            & connectAttachPt(attach_pt, prologue, lst_node)) ||
            assertFalse("setAttachableBlocks failed"));
    }
}



// STEP 2: request to blockify ScalaExprStmt's that    
// are incompatible with C-style edges

rule blockifyDefault {
    . -:CstyleExprTarget-> expr:ScalaExprStmt;
    negative { expr; expr -:AbstractBlockify-> expr; }
    modify { expr -:BlockifyExpr-> expr; }
}

rule blockifyLists {
    . -:CstyleExprTarget-> :List -:ListElt-> :ListNode
        -:ListValue-> expr:ScalaExprStmt;
    negative { expr; expr -:AbstractBlockify-> expr; }
    modify { expr -:BlockifyExpr-> expr; }
}

rule forwardNonblockifyIntermediatePrologue {
    y:Node -:CfgSequentialNext->
        x:CfgDummyNode -:CfgSequentialNext-> z:Node;
    // FIXME -- hack to force Blockify to propagate with sub-blocks
    negative { if { typeof(z) >= CfgAbstractAttachable; } }
    // another hack, such that forwarding works correctly.
    negative {
        ast_x:Node -:CfgPrologue-> x;
        ast_x -:AbstractBlockify-> ast_x;
    }
    modify { exec(forwardIntermediatePrologueInner(x)+
        && deleteNode(x)); }
}

rule forwardNonblockifyIntermediatePrologueInner(x:CfgAbstractNode) {
    y:Node -e:CfgSequentialNext-> x -:CfgSequentialNext-> z:Node;
    modify { y -:typeof(e)-> z; delete(e); }
}



// STEP 3: propagate blockify. simply won't match blockify nodes in cfg chain

{% macro blockify_graphlet(next_cls) %}
x:{{ next_cls }} --> :CfgEvalNode -:CfgSequentialNext->
        blockify_cfg_node:CfgAbstractNode;
    y:ScAstNode -:AbstractBlockify-> y -:CfgPrologue-> blockify_cfg_node;
{% endmacro %}

/// need next ptrs for two sequential ScalaExprStmt's
rule setBlockifyNextForAlreadyBlockified {
    {{ blockify_graphlet("ScAstNode") }}
    x -:AbstractBlockify-> x;
    negative { x -:BlockifyNext-> y; }
    modify { x -:BlockifyNext-> y; }
}

{% macro blockify_new_graphlet(next_cls) %}
{{ blockify_graphlet(next_cls) }}
    negative { x -:AbstractBlockify-> x; }
{% endmacro %}

/// need to blockify previous arguments so we don't change
/// the effective CFG order
rule propagateBlockifyUnsafe {
    {{ blockify_new_graphlet("ScAstNode") }}
    negative { if { typeof(x) >= BlockifySafe; } }
    modify {
        x -:BlockifyExpr-> x -:BlockifyNext-> y;
    }
}

/// some nodes, like ??, don't have data dependencies, so they don't have to move.
rule propagateBlockifyMarkSafe {
    {{ blockify_new_graphlet("BlockifySafe") }}
    modify {
        x -:BlockifySkip-> x -:BlockifyNext-> y;
    }
}

rule convertNodesAlreadyStmtsToBlockifySafe {
    x:Block -:BlockStmtList-> lst:List -:ListElt-> :ListNode -:ListValue-> y:ScAstNode;
    y -e:BlockifyExpr-> y;
    modify { delete(e); y -:BlockifySkip-> y; }
}

rule setBlockifyChain {
    x:CfgAbstractAttachable -:CfgAbstractNext-> y:CfgAbstractNode;
    z:ScAstNode -:AbstractBlockify-> z --> y;
    negative { x -:BlockifyAttach-> z; }
    modify { x -:BlockifyAttach-> z; }
}

rule checkBlockifyLinks {
    x:Node -:AbstractBlockify-> x;
    y:Node -e:Edge-> x;
    // ignore if...
    negative {
        // x is an instance of ScAstNode
        if { typeof(x) >= ScAstNode; }
        // and e is an accepted type
        if { (typeof(e) >= ListValue) ||
            (typeof(e) >= Subtree) ||
            (typeof(e) >= BlockifyNext); }
    }
    modify { exec(printn(y) & print("\\n") &
        assertFalse("checkBlockifyLinks")); }
}

rule forwardBlockifySkip {
    x:Node -e1:BlockifyNext-> y:ScAstNode -e2:BlockifyNext-> z:ScAstNode;
    if { typeof(x) >= ScAstNode || typeof(x) >= CfgAttachable; }
    y -e3:BlockifySkip-> y;
    modify {
        delete(e1, e2, e3);
        x -:typeof(e1)-> z; // e1 because it could be a BlockifyAttach
    }
}



// STEP 5: create temporary TmpVarRef / BlockifyValDef's for each blockify expression

rule addDummyBlockifyChainEndNodes {
    x:ScAstNode -:BlockifyExpr-> x;
    negative { x; x -:BlockifyNext-> .; }
    modify {
        x -:BlockifyNext-> :DummyBlockifyChainEndNode;
    }
}

rule redirect_incoming_subtree_relations(x:ScAstNode, y:ScAstNode) {
    z:Node -e:Edge-> x;
    if { typeof(e) >= Subtree || typeof(e) >= ListValue; }
    modify {
        delete(e);
        z -:typeof(e)-> y;
    }
}

rule postsetValDefRhs(x : ValDef, y : ScAstNode) {
    modify { x -:ValDefRhs-> y; }
}

rule createTemporaryAssign {
    prev:Node -e1:BlockifyNext->
        x:ScAstNode -e2:BlockifyExpr-> x
        -e3:BlockifyNext-> post:Node;
    x -:ScTypeSymbol-> typ_sym:Symbol;

    modify {
        tmp_assign:BlockifyValDef -:ValDefSymbol-> tmp_sym:TmpSymbol;
        var_ref:TmpVarRef -:VarRefSymbol-> tmp_sym;
        tmp_sym -:TypeSymbol-> typ_sym;

        // new blockify links
        delete(e1, e2, e3);
        prev -:typeof(e1)-> tmp_assign -:typeof(e3)-> post;
        exec(redirect_incoming_subtree_relations(x, var_ref)* &
            postsetValDefRhs(tmp_assign, x));
    }
}



// STEP 6: attach new nodes to the block

rule attachNodesToBlockList {
    x:CfgAttachable -:CfgAttachableAstNode-> lst_node:ListNode;
    x -e1:BlockifyAttach-> y:ScAstNode -e2:BlockifyNext-> z:Node;
    modify {
        delete(e1, e2);
        x -:BlockifyAttach-> z;
        exec(listInsertBefore(lst_node, y));
    }
}

rule deleteLastAttachables {
    x:CfgAttachable -:BlockifyAttach-> y:DummyBlockifyChainEndNode;
    x -:CfgAttachableAstNode-> z:ListNode;
    negative { y; x; y --> .; }
    negative { y; x; . --> y; }
    modify { delete(x, y); }
}

rule deleteLastAttachables2 {
    x:CfgAbstractAttachable -:CfgAttachableAstNode-> z:ListNode;
    negative { x; z; x --> .; }
    negative { x; z; . --> x; }
    modify { delete(x); }
}

test existsBlockify {
    x:Node -:AbstractBlockify-> x;
}

{% endblock %}
