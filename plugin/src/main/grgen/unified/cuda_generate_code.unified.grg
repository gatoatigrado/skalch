{% import "macros.grg" as macros with context %}

{% block comment %}
// author: gatoatigrado (nicholas tung) [ntung at ntung]
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .
//
// DESCRIPTION OF FILE HERE
// TODO -- update rewrite_rules.fs, rewrite_stage_info.fs, transformer.fs
{% endblock %}

{% block gm %}
// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2
{% endblock %}

{% block grg %}

//--------------------------------------------------
// Basic structure of string representation for AST
//-------------------------------------------------- 
// print rep for function def's
rule setStringRepFcnDef {
    x:FcnDef -:FcnBody-> body:SKBlock;
    x -:FcnDefParamsList-> args:List;
    x -:FcnDefSymbol-> sym:Symbol;
    x -:FcnDefReturnTypeSymbol-> typsym:Symbol;

    negative { x -:StringRep-> .; }
    modify {
        x -:StringRepPara-> {{ macros.finiteListInit(
            ["typsym", "sym", "parens:NSRParens", "body" ]) }}

        parens -:StringRepNode-> paramlst:NStringRepSepList;
        paramlst -:NSRListBase-> args;
        paramlst -:NSRListSep-> z:NStringRepConstant;
        paramlst -:NSRListElts-> {{ macros.finiteListInit([], lstname="lst2") }}

        eval {
            z.value = ", ";
        }
    }
}

rule setStringRepCudaKernelFcn {
    x:FcnDef -:FcnDefSymbol-> sym:Symbol;
    sym -:CudaKernelFcn-> sym;
    x -:StringRepPara-> lst:List;

    modify {
        globalname:NStringRepLiteral;
        eval { globalname.value = "__global__"; }
        exec(listInsertFirst(lst, globalname));
    }
}

rule setStringRepBlock {
    x:Block -:BlockStmtList-> stmts:List;

    negative { x -:StringRep-> .; }
    modify {
        x -:StringRepNode-> :NSRSpaces -:StringRepNode-> braces:NSRBraces
            -:StringRepBasicList-> {{ macros.finiteListInit(
                ["a:NStringRepIncreaseIdent", "b:NStringRepNewLine",
                 "stmtlst:NStringRepSepList", "semi:NStringRepConstant",
                 "c:NStringRepDecreaseIdent", "d:NStringRepNewLine"]) }}
        stmtlst -:NSRListBase-> stmts;
        stmtlst -:NSRListSep-> {{ macros.finiteListInit(
            ["semi", ":NStringRepNewLine"], lstname="lst2") }}
        stmtlst -:NSRListElts-> {{ macros.finiteListInit([], lstname="lst3") }}
        eval { semi.value = ";"; }
    }
}

rule setStringRepReturn {
    x:Return -:ReturnExpr-> expr:ScAstNode;
    negative { x -:StringRep-> .; }

    modify {
        x -:StringRepNode-> {{ macros.finiteListInit(
            ["returnconst:NStringRepConstant", "expr"]) }}
        eval { returnconst.value = "return "; }
    }
}



// ==== subsection function calls ====

rule setStringRepCudaParIdxCall {
    x:CudaParallelIndexCall -:FcnCallSymbol-> sym:Symbol;
    negative { x -:StringRep-> .; }

    modify {
        x -:StringRepSingleChild-> sym;
    }
}

rule setStringRepFcnCallBinary {
    x:FcnBinaryCall -:FcnArgList->
        {{ macros.finiteList(["left:ScAstNode", "right:ScAstNode"]) }}
    negative { x -:StringRep-> .; }

    modify {
        x -:StringRepBasicList-> {{ macros.finiteListInit([
            "safe_left:NSRSafeParens", "op:NStringRepConstant",
            "safe_right:NSRSafeParens"], lstname="lst2") }}
        safe_left -:StringRepNode-> left;
        safe_right -:StringRepNode-> right;
        eval { op.value = " " + x.strop + " "; }
    }
}

rule setStringRepFcnCall {
    x:FcnCall -:FcnArgList-> args:List;
    x -:FcnCallSymbol-> sym:Symbol;

    negative { x -:StringRep-> .; }
    modify {
        x -:StringRepBasicList-> {{ macros.finiteListInit([
            "sym", "parens:NSRParens"]) }}
        parens -:StringRepNode-> stmtlst:NStringRepSepList;
        stmtlst -:NSRListBase-> args;
        stmtlst -:NSRListSep-> z:NStringRepConstant;
        stmtlst -:NSRListElts-> {{ macros.finiteListInit([], lstname="lst2") }}
        eval { z.value = ", "; }
    }
}

// ----



rule setStringRepFieldAccess {
    x:FieldAccess -:FieldAccessObject-> obj:ScAstNode;
    x -:FieldAccessSymbol-> sym:Symbol;
    negative { x -:StringRep-> .; }

    modify {
        x -:StringRepBasicList-> {{ macros.finiteListInit(
            ["obj", "dot:NStringRepConstant", "sym"]) }}
        eval { dot.value = "."; }
    }
}

rule setStringRepEmptyValDef {
    x:ValDef -:ValDefRhs-> :EmptyTree;
    x -:ValDefSymbol-> sym:Symbol;
    sym -:TypeSymbol-> typsym:Symbol;

    negative { x -:StringRep-> .; }
    modify {
        x -:StringRepBasicList->
            {{ macros.finiteListInit(["typsym", "sym"]) }}
    }
}

rule setStringRepSketchArrayAccess {
    x:SketchArrayAccess -:SketchArrayAccessArray-> arr:ScAstNode;
    x -:SketchArrayAccessIndex-> idx:ScAstNode;

    negative { x -:StringRep-> .; }
    modify {
        x -:StringRepBasicList-> {{ macros.finiteListInit([
            "safe_arr:NSRSafeParens", "idx_bracket:NSRBrackets"]) }}
        safe_arr -:StringRepNode-> arr;
        idx_bracket -:StringRepNode-> idx;
    }
}

rule setStringRepSketchArrayAssign {
    assign:SketchArrayAssign;
    assign -:SketchArrayAssignArray-> array:ScAstNode;
    assign -:SketchArrayAssignIndex-> idx:ScAstNode;
    assign -:SketchArrayAssignValue-> value:ScAstNode;

    negative { assign -:StringRep-> .; }
    modify {
        assign -:StringRepBasicList-> {{ macros.finiteListInit([
            "safe_arr:NSRSafeParens", "idx_bracket:NSRBrackets",
            "eq:NSRCEqualAssign", "value" ]) }}
        safe_arr -:StringRepNode-> array;
        idx_bracket -:StringRepNode-> idx;
    }
}

rule setStringRepVarRef {
    x:VarRef -:VarRefSymbol-> sym:Symbol;
    negative { x -:StringRep-> .; }

    modify { x -:StringRepSingleChild-> sym; }
}

rule setStringRepSymbol {
    x:Symbol -:PrintSymName-> y:PrintName;

    negative { x -:StringRep-> .; }
    modify {
        x -:StringRepNode-> z:NStringRepLiteral;
        eval { z.value = y.name; }
    }
}



//--------------------------------------------------
// For now, set string representation of unknown
// nodes to DEBUG
//-------------------------------------------------- 
pattern StringRepTarget(y:Node) {
    alternative {
        A { . -:StringRep-> :List -:ListElt-> :ListNode -:ListValue-> y; }
        B { . -:StringRep-> y; }
    }
}

rule testAppendDummyStringRep {
    y:Node \ (NStringRep + List);
    :StringRepTarget(y);
    negative { y -:StringRep-> .; }

    modify {
        y -:StringRepNode-> z:NStringRepConstant;
        eval { z.value = "DEBUG"; }
    }
}

// for now, forget variable arrays, just leave them as ptrs
rule dummySetVarArraysToPtrs {
    x:VariableArraySymbol -:SymbolTypeArgsList->
        {{ macros.finiteList(["innertyp:Symbol"]) }}
    innertyp -:PrintSymName-> y:PrintName;
    negative { x -:StringRep-> .; }

    modify {
        x -:StringRepNode-> z:NStringRepLiteral;
        eval { z.value = y.name + "*"; }
    }
}



//--------------------------------------------------
// Convert higher-level nodes to basic strings
//-------------------------------------------------- 
//--------------------------------------------------
// pattern ReplaceStringRepParentNode(x:Node) modify (y:Node) {
//     parent:Node -e:Edge-> x;
// 
//     alternative {
//         A {
//             if { typeof(e) >= ListValue; }
//             modify { parent -:typeof(e)-> y; }
//         }
//         B {
//             modify { parent -:StringRepNode-> y; }
//         }
//     }
// 
//     modify { delete(e); }
// }
//-------------------------------------------------- 

pattern ReplaceStringRepParentList(x:Node) modify (y:List) {
    parent:Node -e:Edge-> x;

    alternative {
        A {
            if { typeof(e) >= ListValue; }
            modify { parent -:typeof(e)-> y; }
        }
        B {
            modify { parent -:StringRepBasicList-> y; }
        }
    }

    modify { delete(e); }
}

//--------------------------------------------------
// rule deleteUnnecessaryParens_VarRef {
//     x:NSRSafeParens -e:StringRepNode-> child:VarRef;
//     modify {
//         delete(e);
//         x -:StringRepSingleChild-> child;
//     }
// }
//-------------------------------------------------- 

rule expandNSRSurround {
    x:NSRSurround -e:StringRep-> child:Node;

    modify {
        delete(e);

        left:NStringRepConstant;
        right:NStringRepConstant;
        eval {
            left.value = x.left;
            right.value = x.right;
        }

        next:List<x>;
        {{ macros.finiteListInit(
            [ "left", "child", "right" ], use_lstname="next") }}
    }
}

// special whitespace entries which will be deleted if adjacent
rule expandNSRSpaces {
    x:NSRSpaces -e:StringRep-> child:Node;

    modify {
        delete(e);
        left:NSRSpace;
        right:NSRSpace;
        next:List<x>;
        {{ macros.finiteListInit(
            [ "left", "child", "right" ], use_lstname="next") }}
    }
}

rule convertParaListsToBasic {
    x:Node -e1:StringRepPara-> lst:List;

    modify {
        delete(e1);
        x -:StringRepBasicList-> lst;
        nl1:NStringRepNewLine;
        nl2:NStringRepNewLine;
        nl3:NStringRepNewLine;
        exec(listInsertFirst(lst, nl1) && listInsertLast(lst, nl2)
            && listInsertFirst(lst, nl3));
    }
}

// step 1
rule expandStringRepSepList_Copy {
    seplist:NStringRepSepList;
    seplist -e:NSRListBase-> args:List;
    seplist -:NSRListElts-> copyto:List
        -:ListFirst-> first:ListFirstNode;

    modify {
        delete(e);
        exec(insertListToList(first, args));
    }
}

rule expandStringRepSepList_InsertSep {
    seplist:NStringRepSepList;
    seplist -:NSRListSep-> sep:Node;
    seplist -:NSRListElts-> lst:List
        -:ListElt-> first:ListNode
        -:ListNext-> second:ListNode;
    first -:ListValue-> first_val:Node;
    second -:ListValue-> second_val:Node;

    modify {
        exec(listInsertAfter(first, sep));
    }
}

rule expandStringRepSepList_DeleteNode {
    seplist:NStringRepSepList;
    seplist -:NSRListElts-> lst:List;
    r:ReplaceStringRepParentList(seplist);

    modify { r(lst); }
}



//--------------------------------------------------
// Linearize the string representation structure
//-------------------------------------------------- 
rule forwardStringReps {
    x:Node -:StringRepBasicList-> :List
        -:ListElt-> lst_y:ListNode -e:ListValue-> y:Node \ NStringRep;
    y -:StringRep-> z:Node;

    modify {
        delete(e);
        lst_y -:ListValue -> z;
    }
}

rule forwardStringRepsSingleChild {
    x:Node -e:StringRepSingleChild-> y:Node \ NStringRep;
    y -e2:StringRep-> z:Node;

    modify {
        delete(e);
        x -:typeof(e2)-> z;
    }
}

rule linearizeStringReps {
    x:Node -:StringRepBasicList-> :List
        -:ListElt-> lst_y:ListNode -e:ListValue-> y:List;

    modify {
        // delete it regardless, list could be empty
        exec(insertListToList(lst_y, y) | listDelete(lst_y));
    }
}



//--------------------------------------------------
// Handle newlines and indentation
//-------------------------------------------------- 
pattern AdjacentStringRep(first:ListNode, second:ListNode) {
    x:Node -:StringRepBasicList-> lst:List;
    lst -:ListElt-> first -:ListNext-> second;
}

/// first one should be blank to avoid trailing whitespace
rule handleAdjacentNewlines {
    first:ListNode; second:ListNode;
    :AdjacentStringRep(first, second);

    first -:ListValue-> v1:NStringRepNewLine;
    second -:ListValue-> v2:NStringRepNewLine;

    modify {
        nl:NStringRepConstant;
        eval { nl.value = "\n"; }
        exec(listInsertAfter(first, nl) && listDelete(first));
    }
}

rule hackPropagateIdent {
    first:ListNode; second:ListNode;
    :AdjacentStringRep(first, second);

    first -:ListValue-> :NStringRepIncreaseIdent;
    second -:ListValue-> v2:NStringRep;

    modify {
        eval { v2.nident = v2.nident + 1; }
        exec(listDelete(first));
    }
}

rule propagateIndent {
    x:ListNode -:ListValue-> :NStringRepIncreaseIdent;

    modify {
        exec(propagateIdentInner(x, 1) | listDelete(x));
    }
}

rule propagateDeindent {
    x:ListNode -:ListValue-> :NStringRepDecreaseIdent;

    modify {
        exec(propagateIdentInner(x, -1) | listDelete(x));
    }
}

rule propagateIdentInner(x:ListNode, var val : int) {
    x -:ListNext-> y:ListNode -:ListValue-> yval:NStringRep;
    modify {
        eval { yval.nident = yval.nident + val; }
        exec(propagateIdentInner(y, val));
    }
}

rule appendIndentation(n:NStringRepConstant) {
    if { n.nident > 0; }

    modify {
        eval {
            n.value = n.value + " ";
            n.nident = n.nident - 1;
        }
        exec(appendIndentation(n));
    }
}

rule handleNewline {
    x:NStringRepNewLine;

    modify {
        nl:NStringRepConstant<x>;
        eval { nl.value = "\n"; }
        exec(appendIndentation(nl));
    }
}



//--------------------------------------------------
// Collapse lists to a single string node
//-------------------------------------------------- 
rule collapseStringRepAdjacentLiterals {
    first:ListNode; second:ListNode;
    :AdjacentStringRep(first, second);

    first -:ListValue-> v1:NStringRepLiteral;
    second -:ListValue-> v2:NStringRepLiteral;

    modify {
        space:NSRSpace;
        exec(listInsertAfter(first, space));
    }
}

rule deleteAdjancentSpaces {
    first:ListNode; second:ListNode;
    :AdjacentStringRep(first, second);

    first -:ListValue-> v1:NSRSpace;
    second -:ListValue-> v2:NSRWhitespace;

    modify {
        exec(listDelete(first));
    }
}

rule collapseStringRep {
    first:ListNode; second:ListNode;
    :AdjacentStringRep(first, second);

    first -:ListValue-> v1:NStringRepConstant;
    second -:ListValue-> v2:NStringRepConstant;

    modify {
        v3:NStringRepConstant;
        eval { v3.value = v1.value + v2.value; }
        exec(listInsertBefore(first, v3) && listDelete(first) && listDelete(second));
    }
}

rule collapseSingletonLists {
    x:Node -e:StringRepBasicList->
        {{ macros.finiteList(["elt:NStringRepConstant"]) }}

    modify {
        delete(e);
        x -:StringRepNode-> elt;
    }
}

rule printMethodStringRep {
    x:MemberFcn -:StringRepNode-> v:NStringRepConstant;

    modify { emit(v.value + "\n"); }
}

{% endblock %}
