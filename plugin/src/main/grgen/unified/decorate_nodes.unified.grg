{% import "macros.grg" as macros with context %}

{% block comment %}
// author: gatoatigrado (nicholas tung) [ntung at ntung]
// 
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .
// 
// Add custom types to certain nodes
{% endblock %}

{% block grg %}
// === set enclosing function ===
rule setEnclosingFunctionInitial {
    x:FcnDef;
    negative { x -:EnclosingFcn-> x; }
    ise:iteratedSetEnclosing(x, x);
    modify { ise(); }
}

pattern iteratedSetEnclosing(x:ScAstNode, fcn:FcnDef) {
    hom(x, fcn);
    iterated {
        x -:Subtree -> y:ScAstNode;
        ise:iteratedSetEnclosing(y, fcn);
        modify { ise(); }
    }
    iterated {
        x -:OldChainNext -> y:ScAstNode;
        ise:iteratedSetEnclosing(y, fcn);
        modify { ise(); }
    }
    iterated {
        x -:Subtree-> lst:List;
        iterated {
            lst -:ListElt-> :ListNode -:ListValue-> y:ScAstNode;
            ise:iteratedSetEnclosing(y, fcn);
            modify { ise(); }
        }
        modify { }
    }
    modify { x -:EnclosingFcn-> fcn; }
}



// === set symbol types ===
rule setRootSymbol {
    x:Symbol;
    if { x.fullSymbolName == "<none>"; }
    negative { x --> y:Symbol; }
    replace { next:RootSymbol<x>; }
}

test existsRootSymbol {
    x:RootSymbol;
}

test multipleRootSymbols {
    x:RootSymbol;
    y:RootSymbol;
}

rule replaceAngelicSketchSymbol {
    cls_sym:Symbol -:SymbolOwner-> pkg_sym:Symbol;
    if {
        cls_sym.symbolName == "AngelicSketch";
        pkg_sym.symbolName == "skalch";
        typeof(cls_sym) == Symbol;
    }
    modify {
        angelicsym:AngelicSketchSymbol<cls_sym>;
    }
}

{% set retypeList = [] %}
{% macro retype_syms(lst, totype, skbase=False, rel=False) %}
{% set fcnName = "symRetype" + ("Sketch" if skbase else "") + totype %}
{% do retypeList.append(fcnName) %}
rule {{ fcnName }} {
    x:Symbol;
{% if skbase %}
    independent { x -:SymbolOwner-> :SketchBaseSymbol; }
{% endif %}
    if {
{% for typ in lst %}
        x.{{ "fullSymbol" if not (skbase or rel) else "symbol" }}Name == "{{ typ }}"{{ " || " if not loop.last else ";" }}
{% endfor %}
    }
    modify { next:{{ totype }}<x>; }
}
{% endmacro %}

{{ retype_syms(["scala.Predef.assert"], "AssertFcnSymbol") }}
{{ retype_syms(["synthAssert"], "AssertFcnSymbol", skbase=True) }}
{{ retype_syms(["$bang$bang"], "BangBangSymbol", skbase=True) }}
{{ retype_syms(["$qmark$qmark"], "HoleSymbol", skbase=True) }}
{{ retype_syms(["scala.Int.unbox", "scala.Boolean.unbox",
   "scala.Float.unbox", "scala.Double.unbox"], "ScalaUnboxSymbol") }}
{{ retype_syms(["scala.Unit"], "ScalaUnitTypeSymbol") }}

rule runAllSymbolRetypes {
    modify {
        exec(
{% for elt in retypeList %}
            [{{ elt }}]{{ " & " if not loop.last else ");" }}
{% endfor %}
    }
}

rule setScalaRoot {
    s1:Symbol;
    if { s1.fullSymbolName == "scala"; }
    modify { rt:ScalaSymbol<s1>; }
}

rule setScalaSubtypes {
    s1:Symbol -:SymbolOwner-> s2:ScalaSymbol;
    if { typeof(s1) == Symbol; }
    modify { rt1:ScalaSymbol<s1>; }
}

rule setStaticAnnotationTypes {
    annot:Annotation -symlink:AnnotationSymbol-> annot_sym:Symbol;
    if { annot_sym.fullSymbolName == "skalch.AngelicSketch$Range"; }
    modify {
        delete(symlink);
        next_sym:StaticSketchAnnotation<annot>;
    }
}

rule setIgnoreAnnotationType {
    annot:Annotation -symlink:AnnotationSymbol-> annot_sym:Symbol;
    if { annot_sym.fullSymbolName == "skalch.SkalchIgnoreClass"; }
    modify {
        delete(symlink);
        next_sym:IgnoreClassAnnotation<annot>;
    }
}

rule setOuterSymbol {
    outer_sym:Symbol -:SymbolOwner-> cls_sym:Symbol;
    clsdef:ClassDef -:ClassDefFieldSymbol-> outer_sym;
    clsdef -:ClassDefSymbol-> cls_sym;
    if {
        outer_sym.symbolName == "$outer";
        typeof(outer_sym) == Symbol;
    }
    modify { next_sym:OuterSymbol<outer_sym>; }
}

rule setSketchClasses {
    sym:Symbol -:ParentTypeSymbol-> :AngelicSketchSymbol;
    :ClassDef -:ClassDefSymbol-> sym;
    negative { if { typeof(sym) >= SketchClassSymbol; } }
    modify { next:SketchClassSymbol<sym>; }
}

/// NOTE -- run in convert_this.grs, as conversion of $this$ to a
/// parameter will convert FcnDef's to MemberFcn's.
rule setSketchMainFcn {
    x:MemberFcn -:FcnDefSymbol-> fcn_sym:Symbol
        -:SymbolOwner-> :SketchClassSymbol;
    if { fcn_sym.symbolName == "main"; }
    negative { if { typeof(x) >= SketchMainFcnDef; } }
    modify { next:SketchMainFcnDef<x>; }
}

{% endblock %}
