{% import "macros.grg" as macros with context %}

{% block comment %}
author: gatoatigrado (nicholas tung) [ntung at ntung]

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

Print unused imports

{% endblock %}
{% block gm %}
edge class CalledMethod extends TmpEdge;
{% endblock %}



{% block grs %}
dump set edge EnclosingFcn color Red

echo "[REWRITE PRODUCTION] print discrete union requirements"
xgrs [setEnclosingFunctionInitial]
redirect emit dependencies.txt
#debug xgrs emitRequiredImports
xgrs setCalledMethods* & emitRequiredImports* & emitProvides*
redirect emit -
xgrs removeEnclosingLinks* & deleteDangling* & cleanupTmpEdges*

{% endblock %}

{% block grg %}
rule setCalledMethods {
    x:FcnCall -:FcnCallSymbol-> y:Symbol;
    negative { y -:CalledMethod-> y; }
    modify { y -:CalledMethod-> y; }
}

{#
rule unsetDefinedCalledMethods {
}
#}

rule emitRequiredImports {
    x:FcnCall -:FcnCallSymbol-> y:Symbol
        -:SymbolOwner-> z:Symbol;
    y -:CalledMethod-> y;
    x -tmp:EnclosingFcn-> e:FcnDef -:FcnDefSymbol-> w:Symbol;

    modify {
        delete(tmp);
        emit(w.fullSymbolName + " requires " + y.fullSymbolName + " in " + z.fullSymbolName + "\n");
    }
}

rule emitProvides {
    x:ClassDef -:ClassDefSymbol-> y:Symbol;
    negative { y -:NodePrinted-> y; }
    modify {
        y -:NodePrinted-> y;
        emit("this module provides " + y.fullSymbolName + "\n");
    }
}

rule cleanupTmpEdges {
    x:Node -e:TmpEdge-> x;
    replace { x; }
}
{% endblock %}
