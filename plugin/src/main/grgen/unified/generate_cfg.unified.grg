{% import "macros.grg" as macros with context %}

{% block comment %}
// -*- coding: utf-8 -*-
// author: gatoatigrado (nicholas tung) [ntung at ntung]

// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

// The control flow graph -- a structure linked to the AST.
// Currently, the CFG is used to attach additional data, which
// is moved back to the AST.
{% endblock %}

{% block grg %}
{% set init_fcns = [] %}
{% set set_next_fcns = [] %}
{% macro append_ret(arr, name) %}
{% do arr.append(name) %}
{{ name }}
{%- endmacro %}
{% macro init_fcn(name) %}{{ append_ret(init_fcns, name) }}{% endmacro %}
{% macro set_next_fcn(name) %}{{ append_ret(set_next_fcns, name) }}{% endmacro %}

// STEP 1: Links from AST to CFG
// based on AST node type

rule {{ init_fcn("cfgInitReturnNodes") }} {
    ret:Return;
    negative { ret -:CfgPrologue-> .; }
    modify {
        ret -:CfgPrologue-> prologue:CfgEvalNormalNode;
        ret -:CfgEpilogue-> epilogue:CfgReturnNode;
    }
}

{% macro exclude_types_not_part_of_cfg() %}
// don't break function boundaries, and leave the graph
    // a little prettier. sync with below
    negative { if { typeof(x) <= ClassDef ||
        typeof(x) <= PackageDef || typeof(x) <= Template; } }
{% endmacro %}

/// nodes that have subtrees will have separate prologue and
/// epilogue nodes. If there is a node whose prologue involves
/// computation, it may be a good idea to initialize it separately
/// before this function (without CfgDummyPrologueNode)
rule {{ init_fcn("cfgInitEnclosingNodes") }} {
    x:ScAstNode -:Subtree-> :Node;
    {{ exclude_types_not_part_of_cfg() }}
    negative { x -:CfgPrologue-> .; }
    modify {
        x -:CfgPrologue-> prologue:CfgDummyPrologueNode;
        x -:CfgEpilogue-> epilogue:CfgEvalNormalNode;
    }
}

/// single node representing evaluation for nodes that don't have subtrees
rule {{ init_fcn("cfgInitOtherNodes") }} {
    x:ScAstNode;
    {{ exclude_types_not_part_of_cfg() }}
    negative { x -:CfgPrologue-> .; }
    negative { x; x -:Subtree-> y:Node; }
    modify {
        x -:CfgPrologueEpilogue-> :CfgEvalNormalNode;
    }
}

rule {{ init_fcn("cfgDeleteParamsNodes") }} {
    :FcnDef -:FcnDefParamsList-> lst:List;
    y:ScAstNode --> z:CfgAbstractNode;
    :IsSubtree(lst, y);
    modify { delete(z); }
}

// STEP 2: Edges from CFG to CFG nodes
// based on AST edge types
// Temporary edges are created from AST nodes to other AST nodes
// These are then rewritten to CFG edges.

rule {{ set_next_fcn("cfgSetSimpleInnerNext") }} {
    x:ScAstNode -:CfgSimpleInner-> y:Node;
    x -:CfgPrologue-> prologue:CfgAbstractNode;
    x -:CfgEpilogue-> epilogue:CfgAbstractNode;

//     optional {
//         if { typeof(y) >= List; }
//         modify { y -:CfgSequentialList-> y; }
//     }

    negative { prologue -:CfgNext-> .; }
    modify { prologue -:CfgNext-> y -:CfgNext-> epilogue; }
}

rule {{ set_next_fcn("cfgSetSeqLists") }} {
    x:ScAstNode -:CfgSimpleInner-> y:List;
    negative { y -:CfgSequentialList-> y; }
    modify { y -:CfgSequentialList-> y; }
}

rule {{ set_next_fcn("cfgSetNextForLists") }} {
    lst_x:ListNode -:ListNext-> lst_y:ListNode
        -:ListValue-> y_value:ScAstNode;
    lst:List -:CfgSequentialList-> lst;
    lst -:ListElt-> lst_x -:ListValue-> x_value:ScAstNode;
    negative { x_value -:CfgNext-> . ; }

    modify {
        x_value -:CfgNext-> y_value;
    }
}

rule {{ set_next_fcn("cfgSetWhileLoopNext") }} {
    x:SKWhileLoop -:SKWhileLoopCond-> cond:ScAstNode;
    x -:SKWhileLoopBody-> body:ScAstNode;
    x -:CfgPrologue-> prologue:CfgAbstractNode;
    x -:CfgEpilogue-> epilogue:CfgAbstractNode;

    negative { body -:CfgAbstractNext-> .; }
    modify {
        prologue -:CfgNext-> cond;
        body -:CfgNext-> cond;
        cond -:CfgConditionalNext-> body;
        cond -:CfgConditionalNext-> epilogue;
    }
}

rule {{ set_next_fcn("cfgSet2SubtreeNext") }} {
    x:ScAstNode -:Cfg2SubtreeSecond-> second:ScAstNode;
    x -:Cfg2SubtreeFirst-> first:ScAstNode;
    x -:CfgPrologue-> prologue:CfgAbstractNode;
    x -:CfgEpilogue-> epilogue:CfgAbstractNode;

    negative { prologue -:CfgNext-> .; }
    modify {
        prologue -:CfgNext-> first -:CfgNext-> second -:CfgNext-> epilogue;
    }
}

rule {{ set_next_fcn("cfgSetIfNext") }} {
    x:If -:IfCond-> cond:ScAstNode;
    x -:IfThen-> then:ScAstNode;
    x -:IfElse-> else:ScAstNode;
    x -:CfgPrologue-> prologue:CfgAbstractNode;
    x -:CfgEpilogue-> epilogue:CfgAbstractNode;

    negative { prologue -:CfgNext-> .; }
    modify {
        prologue -:CfgNext-> cond;
        cond -:CfgConditionalNext-> then;
        cond -:CfgConditionalNext-> else;
        then -:CfgNext-> epilogue;
        else -:CfgNext-> epilogue;
    }
}

// STEP 3: set any edges that are pointing to nodes to their respective
// epilogues / prologues

{% macro redirect_edge(e, from, to) %}
modify {
        delete({{ e }});
        {{ from }} -:typeof({{ e }})-> {{ to }};
    }
{% endmacro %}

rule cfgListIncoming {
    x:Node -e:CfgAbstractNext-> lst:List -:ListFirst-> :ListFirstNode
        -:ListNext-> lst_first:ListNode -:ListValue-> first_ast:ScAstNode;
    {{ redirect_edge("e", "x", "first_ast") }}
}

rule cfgListOutgoing {
    lst:List -e:CfgAbstractNext-> y:Node;
    lst -:ListLast-> last_node:ListLastNode;
    second_last:ListNode -:ListNext-> last_node;
    second_last -:ListValue-> last_ast:ScAstNode;
    {{ redirect_edge("e", "last_ast", "y") }}
}

/// will throw an exception if typeof(e1) != typeof(e2) and it's not rewritten
rule cfgEmptyListIncomingOutgoing {
    x:Node -e1:CfgAbstractNext-> {{ macros.finiteList([]) }}
    lst -e2:CfgAbstractNext-> y:Node;
    if { typeof(e1) == typeof(e2); }
    modify {
        delete(e1, e2);
        x -:typeof(e1)-> y;
    }
}

rule cfgRedirectIncomingToPrologue {
    x:Node -e:CfgAbstractNext-> ast_node:ScAstNode
        -:CfgPrologue-> prologue:CfgAbstractNode;
    {{ redirect_edge("e", "x", "prologue") }}
}

rule cfgRedirectOutgoingToEpilogue {
    ast_node:ScAstNode -e:CfgAbstractNext-> y:Node;
    ast_node -:CfgEpilogue-> epilogue:CfgAbstractNode;
    {{ redirect_edge("e", "epilogue", "y") }}
}

test existsCfgNextFromAst {
    x:Node \ CfgAbstractNode -:CfgAbstractNext-> y:Node;
}

test existsCfgNextToAst {
    x:Node -:CfgAbstractNext-> y:Node \ CfgAbstractNode;
}

// STEP 4 -- optional "skip internal" edges for conditional blocks

{#
rule cfgSkipIf {
    x:If -:CfgPrologue-> prologue:CfgNormalNode;
    x -:CfgEpilogue-> epilogue:CfgNormalNode;
    negative { prologue -:CfgAbstractNext-> .; }
    modify { prologue -:CfgSkipSubtreeNext-> epilogue; }
}
#}

// STEP 5 -- forward next ptrs from dummy prologues.

rule forwardIntermediatePrologue {
    y:Node -:CfgSequentialNext->
        x:CfgDummyNode -:CfgSequentialNext-> z:Node;
    // FIXME -- hack to force Blockify to propagate with sub-blocks
    negative { if { typeof(z) >= CfgAbstractAttachable; } }
    modify { exec(forwardIntermediatePrologueInner(x)+
        && deleteNode(x)); }
}

rule forwardIntermediatePrologueInner(x:CfgAbstractNode) {
    y:Node -e:CfgSequentialNext-> x -:CfgSequentialNext-> z:Node;
    modify { y -:typeof(e)-> z; delete(e); }
}

/*
not necessary -- first step in forming extended sequential nodes.

rule cfgMarkStrictlySequential {
    x:Node -e:CfgSequentialNext-> cfg_node:CfgNormalNode
        -e2:CfgSequentialNext-> y:Node;
    negative { x; cfg_node; z:Node -:CfgSequentialNext-> cfg_node; }
    negative { y; cfg_node; cfg_node -:CfgSequentialNext-> z:Node; }
    negative { cfg_node -:CfgStrictlySequentialNode-> cfg_node; }
    modify { cfg_node -:CfgStrictlySequentialNode-> cfg_node; }
}
*/

// STEP 4: it is often useful to determine extended sequential references.
// note -- since this is from the most recent eval node,
// the resulting graph will not be extremely long.
// this is to avoid the dummy prologue nodes.

// rule cfgInitNextFromEval {
//     x:CfgAbstractNode -:CfgSequentialNext-> y:CfgAbstractNode;
//     negative { x; y; . -:CfgAbstractNext-> y; }
// }

// rule cfgExtendedSequential {
//     x:CfgAbstractNode -:CfgSequentialNext-> y
//    
// }

rule cfgInit {
    // NOTE -- check this file with check_generated_files.py
    modify { exec(
{% for name in init_fcns %}
        {{ name }}* |
{% endfor %}

{% for name in set_next_fcns %}
        {{name}}* |
{% endfor %}

        (
            cfgRedirectIncomingToPrologue+ |
            cfgRedirectOutgoingToEpilogue+ |
            cfgListIncoming+ |
            cfgListOutgoing+ |
            cfgEmptyListIncomingOutgoing+
        )*
        ); }
}

pattern DeleteAttachedCfgNodes(x:Node) {
    multiple {
        x --> y:CfgAbstractNode;
        modify { delete(y); }
    }
    modify { }
}

rule deleteCfgNodesOnClassFields {
    :Template -:TemplateElement-> x:ValDef
        -:ValDefRhs-> y:EmptyTree;
    d1:DeleteAttachedCfgNodes(x);
    d2:DeleteAttachedCfgNodes(y);

    modify { d1(); d2(); }
}

test cfgExistsIncomplete {
    . -:CfgAbstractNext-> x:CfgAbstractNode;
    negative {
        x; x -:CfgAbstractNext-> .;
    }
    negative {
        x; :FcnDef -:CfgEpilogue-> x;
    }
}

{% endblock grg %}
