{% macro inner_rule(name, var, typ) %}
rule {{ name }} {
    {{ var }}:{{ typ }};
    modify { exec({{ name }}Inner({{ var }}) || assertFalse("{{ name }} inner rule failed.")); }
}

rule {{ name }}Inner({{ var }}:{{ typ }}) {
    {{ caller() }}
}
{% endmacro %}



{# list macros #}

{% macro list_graphlet(names) -%}
    lst:List -:ListFirst-> lst_first:ListFirstNode -:ListNext->
{% for name in names %}
        {{ name }}:ListNode -:ListNext->
{% endfor %}
        lst_last:ListLastNode;
{%- endmacro %}

{% macro finiteListBase(names, isInit, lstname) -%}
    {{ lstname }}:List -:ListFirst-> {{ lstname }}_first:ListFirstNode -:ListNext->
{% for name in names %}
        lstnode_{{ name.split(":")[0] }}:ListNode -:ListNext->
{% endfor %}
        {{ lstname }}_last:ListLastNode;
{% if isInit %}
        {{ lstname }} -:ListLast-> {{ lstname }}_last;
{% endif %}
{% for name in names %}
{% if isInit %}
        {{ lstname }} -:ListElt-> lstnode_{{ name.split(":")[0] }} -:ListValue-> {{ name }};
{% else %}
        lstnode_{{ name.split(":")[0] }} -:ListValue-> {{ name }};
{% endif %}
{% endfor %}
{%- endmacro %}

{% macro finiteList(names, lstname="lst") %}{{ finiteListBase(names, False, lstname) }}{% endmacro %}
{% macro finiteListInit(names, lstname="lst") %}{{ finiteListBase(names, True, lstname) }}{% endmacro %}



{# various utility things #}
{# place this in an eval block #}

{% macro copySrcPosition(from_, to_arr) %}
{% for to_ in to_arr %}
    {{ to_ }}.startLine = {{ from_ }}.startLine;
    {{ to_ }}.startCol = {{ from_ }}.startCol;
    {{ to_ }}.endLine = {{ from_ }}.endLine;
    {{ to_ }}.endCol = {{ from_ }}.endCol;
{% endfor %}
{% endmacro %}
