{% macro inner_rule(name, var, typ) %}
rule {{ name }} {
    {{ var }}:{{ typ }};
    modify { exec({{ name }}Inner({{ var }}) || assertFalse("{{ name }} inner rule failed.")); }
}

rule {{ name }}Inner({{ var }}:{{ typ }}) {
    {{ caller() }}
}
{% endmacro %}



{# list macros #}

{% macro list_graphlet(names) -%}
    lst:List -:ListFirst-> lst_first:ListFirstNode -:ListNext->
{% for name in names %}
        {{ name }}:ListNode -:ListNext->
{% endfor %}
        lst_last:ListLastNode;
{%- endmacro %}



{% macro finiteListBase(names, isInit, lstname, create_list) -%}
{% for name in names %}
{% if not name %}
{% do names[loop.idx].__setitem__("unnamed" + loop.idx) %}
{% endif %}
{% endfor %}
    {{ lstname }}{{ ":List" if create_list else "" }} -:ListFirst-> {{ lstname }}_first:ListFirstNode -:ListNext->
{% for name in names %}
        {{ lstname }}_node_{{ name.split(":")[0] }}:ListNode -:ListNext->
{% endfor %}
        {{ lstname }}_last:ListLastNode;
{% if isInit %}
        {{ lstname }} -:ListLast-> {{ lstname }}_last;
{% endif %}
{% for name in names %}
{% if isInit %}
        {{ lstname }} -:ListElt-> {{ lstname }}_node_{{ name.split(":")[0] }} -:ListValue-> {{ name }};
{% else %}
        {{ lstname }}_node_{{ name.split(":")[0] }} -:ListValue-> {{ name }};
{% endif %}
{% endfor %}
{%- endmacro %}

{% macro finiteList(names, lstname="lst", use_lstname=None) %}{{ finiteListBase(names, False, lstname if not use_lstname else use_lstname, not use_lstname) }}{% endmacro %}
{% macro finiteListInit(names, lstname="lst", use_lstname=None) %}{{ finiteListBase(names, True, lstname if not use_lstname else use_lstname, not use_lstname) }}{% endmacro %}



{# various utility things #}
{# place this in an eval block #}

{% macro copySymbolAttrs(from_, to_arr) %}
{%- for to_ in to_arr -%}
        {{ to_ }}.uniqueSymbolName = {{ from_ }}.uniqueSymbolName;
        {{ to_ }}.simpleName = {{ from_ }}.simpleName;
        {{ to_ }}.fullSymbolName = {{ from_ }}.fullSymbolName;
        {{ to_ }}.symbolName = {{ from_ }}.symbolName;
{% endfor -%}
{% endmacro %}

{% macro copySrcPosition(from_, to_arr) %}
{%- for to_ in to_arr -%}
        {{ to_ }}.sourceFile = {{ from_ }}.sourceFile + "-COMPILER_INTERNAL";
        {{ to_ }}.startLine = {{ from_ }}.startLine;
        {{ to_ }}.startCol = {{ from_ }}.startCol;
        {{ to_ }}.endLine = {{ from_ }}.endLine;
        {{ to_ }}.endCol = {{ from_ }}.endCol;
{% endfor -%}
{% endmacro %}

{% macro copySrcInfo(from_, to_arr) -%}
{{ copySrcPosition(from_, to_arr) }}
{%- for to_ in to_arr %}
        {{ to_ }}.scalaSource = {{ from_ }}.scalaSource;
{% endfor %}
{% endmacro %}
