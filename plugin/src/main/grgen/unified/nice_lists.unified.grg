{% block comment %}
author: gatoatigrado (nicholas tung) [ntung at ntung]

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

Creates lists which look like

lst -:ListFirst-> :ListFirstNode -:ListNext-> ... --> last:ListLastNode
lst -:ListLast-> last

This abstraction was created because it's easier to replace nodes
when they have only one incoming edge, ListValue, instead of edges
for both "enclosing" lists and their own attributes.

{% endblock %}
{% block gm %}
// edge class MyEdge
// node class MyNode
{% endblock %}



{% block grs %}
echo "[REWRITE PRODUCTION] convert all lists to nice lists"
xgrs listBlockInit*
xgrs listClassDefsInit*
xgrs listInitAllOrdered

xgrs listAddClassField*
xgrs listSetNext*
xgrs listCompleteLast*
xgrs listCompleteBlockLast*
{% endblock %}



{% block grg %}
{% import "macros.grg" as macros %}

// STEP 1: initialize lists.

rule listGenericInit (lst:List, first:ScAstNode, last:ScAstNode) {
    hom(first, last);
    modify {
        lst -:ListFirst-> lst_first:ListFirstNode
            -:ListNext-> first_inner:ListNode
            -:ListValue-> first;
        lst -:ListElt-> first_inner;
        lst -:ListLast-> lst_last:ListLastNode;
        lst -:ListTmpLast-> last;
    }
}

rule listEmptyInit(lst:List) {
    modify {
        lst -:ListFirst-> lst_first:ListFirstNode
            -:ListNext-> lst_last:ListLastNode;
        lst -:ListLast-> lst_last;
    }
}

rule listClassDefsInit {
    x:ClassDef;
    negative { x -:ClassDefFieldsList-> .; }
    modify {
        x -:ClassDefFieldsList-> lst:List;
        exec(listEmptyInit(lst));
    }
}

{% set rules = [] %}

{% macro chain_to_list(ntyp, etyp) %}
{% do rules.append("list%s%sInit" %(ntyp, etyp)) %}
rule list{{ ntyp }}{{ etyp }}Init {
    x:{{ ntyp }} -e1:{{ etyp }}Chain-> first:ScAstNode;
    x -e2:{{ etyp }}Last-> last:ScAstNode;
    hom(first, last);
    modify {
        delete(e1, e2);
        x -:{{ etyp }}List-> lst:List;
        exec(listGenericInit(lst, first, last));
    }
}

{% do rules.append("list%s%sEmptyInit" %(ntyp, etyp)) %}
rule list{{ ntyp }}{{ etyp }}EmptyInit {
    x:{{ ntyp }} -e1:{{ etyp }}Chain-> z:EmptyChain;
    replace {
        x -:{{ etyp }}List-> lst:List -:ListFirst-> :ListFirstNode
            -:ListNext-> last_node:ListLastNode;
        lst -:ListLast-> last_node;
    }
}
{% endmacro %}

{{ chain_to_list("FcnCall", "FcnArg") }}
{{ chain_to_list("FcnDef", "FcnDefParams") }}
{{ chain_to_list("SKBlock", "BlockStmt") }}
{{ chain_to_list("NewArray", "ArrValue") }}
{{ chain_to_list("Annotation", "AnnotationArgs") }}

rule listInitAllOrdered {
    modify { exec(
{% for r in rules %}
        {{ r }}*{{ " |" if not loop.last else "" }}
{% endfor %}
    ); }
}

// TODO -- handle empty and expression-only blocks.
rule listBlockInit {
    x:Block -e1:BlockStmtChain-> first:ScAstNode;
    x -e2:BlockStmtLast-> stmt_last:ScAstNode;
    x -:BlockExpr-> expr:ScAstNode;
    hom(first, stmt_last);
    modify {
        delete(e1, e2);
        x -:BlockStmtList-> lst:List;
        stmt_last -:BlockStmtNext-> expr;
        exec(listGenericInit(lst, first, expr));
    }
}



// STEP 2a: create unordered lists
rule listAddClassField {
    x:ClassDef -:ClassDefFieldsList-> lst:List
        -:ListFirst-> lst_first:ListFirstNode;
    x -e:ClassDefFieldSymbol-> sym:Symbol;
    modify {
        delete(e);
        exec(listInsertAfter(lst_first, sym));
    }
}



// STEP 2: create list nodes from Sibling edges

rule listSetNext {
    lst:List -:ListElt-> lst_x:ListNode -:ListValue-> ast_x:ScAstNode;
    ast_x -e:Sibling-> ast_y:ScAstNode;
    modify {
        delete(e);
        lst -:ListElt-> list_next:ListNode;
        lst_x -:ListNext-> list_next;
        list_next -:ListValue-> ast_y;
    }
}

rule listCompleteLast {
    lst:List -e:ListTmpLast-> last_inner_node:ScAstNode;
    lst -:ListElt-> last_inner:ListNode -:ListValue-> last_inner_node;
    lst -:ListLast-> list_last:ListLastNode;
    modify {
        delete(e);
        last_inner -:ListNext-> list_last;
    }
}

rule listCompleteBlockLast {
    x:Block -:BlockStmtList-> lst:List -:ListElt-> lst_node:ListNode
        -:ListValue-> v:ScAstNode;
    x -e:BlockExpr-> v;
    modify {
        delete(e);
        x -:BlockExpr-> lst_node;
    }
}



//--------------------------------------------------
// Basic node-level operations (delete, insert before/after)
// don't use any of the *Inner functions
//-------------------------------------------------- 

rule listDeleteInner(x:ListNode) {
    lst:List -:ListElt-> x;
    before:ListAbstractNode -:ListNext-> x -:ListNext-> after:ListAbstractNode;
    modify {
        delete(x);
        before -:ListNext-> after;
    }
}

rule listDelete(x:ListNode) {
    modify { exec(listDeleteInner(x) || assertFalse("list delete failed")); }
}

rule listDoInsertAfter(x:ListAbstractNode, lst_y:ListNode) {
    lst:List -:ListElt-> x -e:ListNext-> next:ListAbstractNode;
    modify {
        delete(e);
        x -:ListNext-> lst_y -:ListNext-> next;
        lst -:ListElt-> lst_y;
    }
}

/// first arg: node already part of list; second arg: node to insert
rule listInsertAfter(x:ListAbstractNode, y:Node) {
    modify { lst_y:ListNode -:ListValue-> y;
        exec(listInsertNodeAfter(x, lst_y) || assertFalse("list insert after failed")); }
}

/// first arg: node already part of list; second arg: node to insert
rule listInsertNodeAfter(x:ListAbstractNode, y:ListNode) {
    modify { exec(listDoInsertAfter(x, y) || assertFalse("list insert after failed")); }
}

rule listDoInsertBefore(x:ListAbstractNode, y:Node) {
    lst:List -:ListElt-> x;
    before:ListAbstractNode -e:ListNext-> x;
    modify {
        delete(e);
        before -:ListNext-> lst_y:ListNode -:ListNext-> x;
        lst -:ListElt-> lst_y -:ListValue-> y;
    }
}

/// first arg: node already part of list; second arg: node to insert
rule listInsertBefore(x:ListAbstractNode, y:Node) {
    modify { exec(listDoInsertBefore(x, y) || assertFalse("list insert before failed")); }
}

rule listInsertFirst(lst:List, y:Node) {
    lst -:ListFirst-> first:ListFirstNode;
    modify { exec(listInsertAfter(first, y)); }
}

rule listInsertLast(lst:List, y:Node) {
    lst -:ListLast-> last:ListLastNode;
    modify { exec(listInsertBefore(last, y)); }
}



//--------------------------------------------------
// List info: match patterns, count functions
//-------------------------------------------------- 
pattern IsListFirst(lst:List, y:ScAstNode) {
    lst -:ListFirst-> :ListFirstNode
        -:ListNext-> :ListNode -:ListValue-> y;
}

pattern IsFirstListNode(lst:List, y:ListNode) {
    independent {
        lst -:ListFirst-> :ListFirstNode
            -:ListNext-> y;
    }
}

pattern IsListLast(lst:List, y:ScAstNode) {
    lst -:ListLast-> last:ListLastNode;
    n:ListNode -:ListNext-> last;
    n -:ListValue-> y;
}

pattern IsLastListNode(lst:List, y:ListNode) {
    lst -:ListLast-> last:ListLastNode;
    y -:ListNext-> last;
}

rule countListInner(x:ListAbstractNode, y:IntConstant) {
    x -:ListNext-> z:ListNode;
    modify {
        eval { y.value = y.value + 1; }
        exec(countListInner(z, y));
    }
}

rule countList(lst:List, y:IntConstant) {
    lst -:ListFirst-> x:ListFirstNode;
    modify {
        exec(countListInner(x, y));
    }
}



//--------------------------------------------------
// List-list operations
//-------------------------------------------------- 

/// insert a list after a specified list node
/// useful for linearizing lists
rule insertListToList(x:ListAbstractNode, y:List) {
    y -:ListFirst-> first:ListFirstNode;
    first -:ListNext-> firstnode:ListNode;

    modify { exec(insertListToListInner(x, firstnode)); }
}

/// copies a node from $y to $x, and calls insertListToListNext
/// to determine if there are more elements in $y to copy.
rule insertListToListInner(x:ListAbstractNode, lst_y:ListNode) {
    lst_y -:ListValue-> v:Node;

    modify {
        xlst_ynode:ListNode -:ListValue-> v;
        exec((listInsertNodeAfter(x, xlst_ynode) || assertFalse("list insert after failed")) && insertListToListNext(xlst_ynode, lst_y));
    }
}

rule insertListToListNext(x:ListNode, lst_y:ListNode) {
    lst_y -:ListNext-> z:ListNode;

    modify { exec(insertListToListInner(x, z)); }
}

{% endblock %}
