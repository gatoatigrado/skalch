{% import "macros.grg" as macros with context %}

{% block comment %}
author: gatoatigrado (nicholas tung) [ntung at ntung]

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

Simply annotations, and then create relevant initializer functions
for any sketch construct assignments.

{% endblock %}
{% block gm %}
edge class TypeAnnotation;

node class PrimitiveIntRange extends ScAstNode;
edge class PrimitiveIntRangeFrom extends Subtree;
edge class PrimitiveIntRangeTo extends Subtree;

edge class IsUntilValue;

node class AnnotFcnDef extends MemberFcn;
edge class AnnotFcnDefConstructType;
{% endblock %}



{% block grg %}
rule cleanupDummyVarBlocks {
    // NOTE -- for some reason, TreeReplacer doesn't work here
    // maybe it's a bug that will be fixed later.
    parent:Node -e:Replaceable->
        x:Block -:BlockStmtList-> {{ macros.finiteList(["y:ValDef", "z:VarRef"]) }}
    y -:ValDefSymbol-> sym:Symbol;
    z -:VarRefSymbol-> sym;
    y -:ValDefRhs-> w:ScAstNode;
    optional {
        sym -:SymbolAnnotation-> annot:Annotation;
        modify { w -:TypeAnnotation-> annot; }
    }
    modify { delete(e); parent -:typeof(e)-> w; }
}

rule deleteAnnotationLink {
    :Symbol -e:Edge-> :Annotation \ IgnoreClassAnnotation;
    modify { delete(e); }
}

test existsDanglingAnnotation {
    x:Annotation;
    negative { x; . --> x; }
}

/** NOTE -- this takes time!
 * TODO -- pass hints to the compiler as to what nodes to look for first */
rule replacePrimitiveRanges {
    x:FcnCall -e1:FcnCallTypeSymbol-> richint:ScalaSymbol;
    x -e2:FcnCallSymbol-> tomethod:ScalaSymbol;
    x -e3:FcnArgList -> {{ macros.finiteList(["view:ApplyImplicitView", "z:IntConstant"]) }}
    view -:FcnArgList-> {{ macros.finiteList([":ScAstNode", "y:IntConstant"], lstname="lst2") }}

    if { richint.symbolName.indexOf("RichInt") == 0; }

    alternative {
        To {
            if { tomethod.symbolName == "to"; }
            modify { }
        }
        From {
            if { tomethod.symbolName == "until"; }
            modify { z -:IsUntilValue-> z; }
        }
    }

    modify {
        delete(e1, e2, e3);
        next:PrimitiveIntRange<x> -:PrimitiveIntRangeFrom-> y;
        next -:PrimitiveIntRangeTo-> z;
    }
}

rule decrementUntilValues {
    x:IntConstant;
    x -e:IsUntilValue-> x;
    modify {
        delete(e);
        eval { x.value = x.value - 1;
            x.scalaSource = "until(" + x.scalaSource + ")"; }
    }
}

rule requestIntHoleTemplate {
    constr:HoleCall -:TypeAnnotation-> x:Annotation
        -:AnnotationArgsList-> {{ macros.finiteList(["y:PrimitiveIntRange"]) }}
    modify {
        emit("Request template IntRangeHole\n");
    }
}

rule attachAnnotationsToTemplates {
    constr:HoleCall -:TypeAnnotation-> x:Annotation
        -:AnnotationArgsList-> {{ macros.finiteList(["y:PrimitiveIntRange"]) }}
    y -:PrimitiveIntRangeFrom-> z:ScAstNode;
    y -:PrimitiveIntRangeTo-> w:ScAstNode;

    tmpl:TemplateFcn;
    :GetTemplateInstance(tmpl, "IntRangeHole");
    negative { z -:TemplateArgument-> .; }

    modify {
        z -e1:TemplateArgument-> tmpl;
        w -e2:TemplateArgument-> tmpl;
        constr -:ReplaceWithTemplateFcnCall-> tmpl;
        constr -:FcnArgList-> {{ macros.finiteListInit([], lstname="lst2") }}
        eval {
            e1.name = "from_";
            e2.name = "to_";
        }
    }
}

{% endblock %}
