{% import "macros.grg" as macros with context %}

{% block comment %}
// author: gatoatigrado (nicholas tung) [ntung at ntung]
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .
//
// Use generic classes (type-parameterized classes) as templates instead
// GT = generic template
{% endblock %}

{% block gm %}
edge class GTInstParamMap;
{% endblock %}

{% block grg %}

rule deleteGTInstanceTypeDefinition {
    x:ClassDef -:ClassDefSymbol-> sym:Symbol
        -:SymbolAnnotation-> annot:Annotation;
    sym -:ParentTypeSymbol-> sym2:Symbol;
    if { annot.typename == "scTemplateInstanceType"; }

    modify {
        delete(x);
        next:GTInstSymbol<sym>;
        emit("TemplateInstance " + sym.fullSymbolName +
            " of " + sym2.fullSymbolName + "\n");
    }
}

rule isolateGT(var instname : string, var basename : string) {
    x:PackageDef;
    basecls:ClassDef -:ClassDefSymbol-> sym:Symbol;
    sym2:GTInstSymbol;
    if { sym.fullSymbolName == basename &&
        sym2.fullSymbolName == instname; }

    modify {
        delete(x);
        next:PackageDef -:PackageDefElement-> basecls;
        next -:PackageDefElement-> sym2;
    }
}

rule emitGTParamsAndValues {
    tmplcls:Annotation -:AnnotationArgsList-> :List
        -:ListFirst-> :ListFirstNode -:ListNext-> firstParam:ListNode;
    :GTInstSymbol -:SymbolAnnotation-> annot2:Annotation
        -:AnnotationArgsList-> :List
        -:ListFirst-> :ListFirstNode -:ListNext-> firstVal:ListNode;
    e:emitGT_pv(firstParam, firstVal);
    if { tmplcls.typename == "scTemplateClass";
        annot2.typename == "scTemplateInstanceType"; }

    modify { e(); }
}

pattern emitGT_pv(param : ListNode, value : ListNode) {
    param -:ListValue-> paramStr:StringConstant;
    value -:ListValue-> valueActual:ClassOfConstant
        -:ClassOfConstantSymbol-> sym:Symbol;

    optional {
        param -:ListNext-> next_param:ListNode;
        value -:ListNext-> next_value:ListNode;
        e:emitGT_pv(next_param, next_value);
        modify { e(); }
    }

    modify {
        paramStr -:GTInstParamMap-> sym;
    }
}

pattern GetGTInstSym(tmplvar:StringConstant, instsym:Symbol) {
    paramStr:StringConstant -:GTInstParamMap-> instsym;
    if { paramStr.value == tmplvar.value; }
    hom(paramStr, tmplvar);
}

rule instGTRewriteInner {
    x:Symbol -e:SymbolAnnotation-> annot:Annotation;
    if { annot.typename == "scRetypeTemplateInner"; }
    annot -:AnnotationArgsList-> lst:List;
    tmplvar:StringConstant;
    :SingletonList(lst, tmplvar);

    substsym:Symbol;
    :GetGTInstSym(tmplvar, substsym);

    modify {
        delete(e);
        x -:InnerTypeSymbol-> substsym;
    }
}

{% endblock %}
