{% import "macros.grg" as macros with context %}

{% block comment %}
// author: gatoatigrado (nicholas tung) [ntung at ntung]
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .
//
// DESCRIPTION OF FILE HERE
// TODO -- update rewrite_rules.fs, rewrite_stage_info.fs, transformer.fs
{% endblock %}

{% block gm %}
// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2
{% endblock %}

{% block grg %}

rule createObjDefs {
    x:ClassDef -:ClassDefSymbol-> sym:Symbol;
    sym -:ObjectSymbol-> sym;

    modify { next:ObjectDef<x>; }
}

pattern ObjectMethodSymbol(sym:Symbol) {
    sym -:SymbolOwner-> sym2:Symbol
        -:ObjectSymbol-> sym2;
}

rule removeObjArgFromFcnCalls {
    x:FcnCall -:FcnArgList-> args:List;
    tvr_node:ListNode -:ListValue-> tvr:ThisVarRef;
    :IsFirstListNode(args, tvr_node);

    x -:FcnCallSymbol-> sym:Symbol <-:FcnDefSymbol- .;
    :ObjectMethodSymbol(sym);

    modify { exec(listDelete(tvr_node)); }
}

rule removeObjArgFromFcnDefs {
    x:FcnDef -:FcnDefParamsList-> params:List;
    tvd_node:ListNode -:ListValue-> tvd:ThisValDef;
    :IsFirstListNode(params, tvd_node);

    x -:FcnDefSymbol-> sym:Symbol;
    :ObjectMethodSymbol(sym);

    modify { exec(listDelete(tvd_node)); }
}

rule removeSuperCallFromInit {
    x:ListNode -:ListValue-> :FcnSuperCall
        -:FcnCallSymbol-> sym:Symbol;
    if { sym.symbolName == "<init>"; }

    modify { exec(listDelete(x)); }
}

rule addObjFieldAsGlobal {
    x:PackageDef;
    y:ObjectDef -:ClassDefFieldsList-> :List
        -:ListElt-> . -:ListValue-> sym:Symbol;
    sym -:TypeSymbol-> typ:Symbol;
    negative { x -:PackageDefGlobal-> . -:ValDefSymbol-> sym; }

    optional {
        y -:ClassDefSymbol-> . -:ParentTypeSymbol-> kernelsym:Symbol;
        if { kernelsym.symbolName == "CudaKernel"; }
        modify { sym -:TermMemLocationType-> :CudaMemDefaultShared; }
    }

    modify {
        x -:PackageDefGlobal-> vd:ValDef -:ValDefSymbol-> sym;
        vd -:ValDefRhs-> :EmptyTree;
        vd -:ValDefTypeSymbol-> typ;
        sym -:GlobalVariable-> sym;
    }
}

rule convertObjFieldAccessToGlobalRef {
    x:FieldAccess -:FieldAccessObject-> tvr:ThisVarRef;
    x -e1:FieldAccessSymbol-> sym:Symbol
        -:GlobalVariable-> sym;
    x -e3:ScTypeSymbol-> typ:Symbol;

    modify {
        delete(tvr, e1, e3);
        next:VarRef<x> -:VarRefSymbol-> sym;
        next -:VarRefTypeSymbol-> typ;
    }
}

rule deletePlaceholderNullAssign {
    x:Assign -e1:AssignLhs-> :VarRef
        -:VarRefSymbol-> sym:Symbol
        -:GlobalVariable-> sym;
    x -e2:AssignRhs-> :NullTypeConstant;
    x -e3:AssignTypeSymbol-> .;

    modify {
        delete(e1, e2, e3);
        next:EmptyTree<x>;
    }
}

{% endblock %}
