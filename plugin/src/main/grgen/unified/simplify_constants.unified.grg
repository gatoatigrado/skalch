{% import "macros.grg" as macros with context %}

{% block comment %}
// author: gatoatigrado (nicholas tung) [ntung at ntung]
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .
//
// DESCRIPTION OF FILE HERE
// TODO -- update rewrite_rules.fs, rewrite_stage_info.fs, transformer.fs
{% endblock %}

{% block gm %}
// place temporary node classes here; permanent ones in ScalaAstModel.gm.jinja2
{% endblock %}

{% block grg %}

rule replaceUnaryNeg {
    parent:Node -e:Replaceable-> x:FieldAccess;
    x -:FieldAccessObject-> y:IntConstant;
    x -:FieldAccessSymbol-> sym:ScalaSymbol;
    if { sym.fullSymbolName == "scala.Int.unary_$minus"; }

    modify {
        delete(e);
        parent -:typeof(e)-> y;
        eval {
            y.scalaSource = y.scalaSource + ".unary-";
            y.value = -y.value;
        }
    }
}

rule replaceSubtraction {
    x:FcnCallBinarySubtract -e:FcnCallSymbol-> .;
    x -e2:FcnCallTypeSymbol-> typ:Symbol;
    x -e3:FcnArgList-> args:List;

    c1:IntConstant;
    c2:IntConstant;
    :FiniteList2(args, c1, c2);

    modify {
        delete(e, e2, e3);
        next:IntConstant<x> -:LiteralTypeSymbol-> typ;
        eval { next.value = c1.value - c2.value; }
    }
}

rule replaceAddition {
    x:FcnCallBinaryAdd -e:FcnCallSymbol-> .;
    x -e2:FcnCallTypeSymbol-> typ:Symbol;
    x -e3:FcnArgList-> args:List;

    c1:IntConstant;
    c2:IntConstant;
    :FiniteList2(args, c1, c2);

    modify {
        delete(e, e2, e3);
        next:IntConstant<x> -:LiteralTypeSymbol-> typ;
        eval { next.value = c1.value + c2.value; }
    }
}

{#
// view other files if you want example rules that do something.
// rule myRule {
//      x:MyNode -e:MyEdge-> z:MyNode2;
//      if { typeof(x) >= BaseClass; } // is subclass of BaseClass
//      modify {
//          x -:MyEdge-> w:MyNode; delete(e);
//          eval {
//              {{ macros.copySrcPosition("x", ["w"]) }}
//          }
//      }
// }
#}
{% endblock %}
