{% block comment %}
author: gatoatigrado (nicholas tung) [ntung at ntung]

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

DESCRIPTION OF FILE HERE

{% endblock %}
{% block gm %}
abstract node class AbstractSketchNodeType;
node class TypeArray extends AbstractSketchNodeType;
node class TypePortal extends AbstractSketchNodeType;
node class TypePrimitive extends AbstractSketchNodeType;
node class TypeInt extends TypePrimitive;
node class TypeBoolean extends TypePrimitive;
node class TypeUnit extends TypePrimitive;
node class TypeStructRef extends AbstractSketchNodeType { typename : string; }

edge class SketchType;
// ArrayLengthExpr from TypeArray to Expression
edge class ArrayInnerTypeSymbol connect TypeArray --> Symbol;

edge class FcnBinaryCallLhs;
edge class FcnBinaryCallRhs;
{% endblock %}



{% block grg %}
{% import "macros.grg" as macros %}

rule setSymbolSketchType {
    x:Symbol -:PrintSymName-> name:PrintName;
    :ClassDef -:ClassDefSymbol-> x;
    negative { x -:SketchType-> .; }
    modify {
        x -:SketchType-> ts:TypeStructRef;
        eval {
            ts.typename = name.name;
        }
    }
}


{% macro set_sketch_type(gxl_type, clsname, sketch_type) %}
rule setSketch{{ sketch_type }} {
    x:{{ gxl_type }};
    if { x.fullSymbolName == "{{ clsname }}"; }
    modify { x -:SketchType-> :{{ sketch_type }}; }
}
{% endmacro %}

{{ set_sketch_type("ScalaSymbol", "scala.Int", "TypeInt") }}
{{ set_sketch_type("ScalaSymbol", "scala.Boolean", "TypeBoolean") }}

rule setSketchTypeArray {
    x:FixedArraySymbol;
    x -:SymbolTypeArgsList-> {{ macros.finiteList(["inner_typ:Symbol"]) }}

    negative { x -:SketchType-> .; }
    modify {
        x -:SketchType-> arrtyp:TypeArray;
        arrtyp -:ArrayLengthExpr-> y:IntConstant;
        arrtyp -:ArrayInnerTypeSymbol-> inner_typ;
        eval { y.value = x.value; }
    }
}

rule setSketchTypeUnit {
    x:ScalaUnitTypeSymbol;
    modify { x -:SketchType-> :TypeUnit; }
}



rule connectFunctions {
    x:PackageDef; y:FcnDef;
    negative { x -:PackageDefFcn-> y; }
    modify { x -:PackageDefFcn-> y; }
}

rule removeEmptyChains {
    x:ListNode -:ListValue-> y:EmptyChain;
    modify {
        delete(y);
        exec(listDelete(x));
    }
}

rule removeEmptyTrees {
    x:SKBlock -:BlockStmtList-> :List
        -:ListElt-> y:ListNode -:ListValue-> :EmptyTree;
    modify { exec(listDelete(y)); }
}

rule setAssertCalls {
    x:FcnCall -:FcnCallSymbol-> :AssertFcnSymbol;
    {{ macros.list_graphlet(["ths", "arg"]) }}
    arg -:ListValue-> assert_expr:ScAstNode;
    x -e_lst:FcnArgList-> lst;
    negative { if { typeof(x) >= SKAssertCall; } }
    modify {
        delete(e_lst, lst, ths, arg, lst_first, lst_last);
        next:SKAssertCall<x> -:SKAssertCallArg-> assert_expr;
    }
}

/// change all subclasses of e.g. FcnBinaryCall to FcnBinaryCall
{% macro set_base_type(name) %}
rule set{{ name }}BaseType {
    x:{{ name }};
    if { typeof(x) > {{ name }}; }
    modify { next:{{ name }}<x>; }
}
{% endmacro %}

{{ set_base_type("FcnBinaryCall") }}

/// change args from regular fcn arg list to a lhs and rhs.
rule setFcnBinaryCallArgs {
    x:FcnBinaryCall -:FcnArgList->
    {{ macros.list_graphlet(["lhs", "rhs"]) }}
    lhs -:ListValue-> lhs_value:ScAstNode;
    rhs -:ListValue-> rhs_value:ScAstNode;
    modify {
        delete(lst, lhs, rhs, lst_first, lst_last);
        x -:FcnBinaryCallLhs-> lhs_value;
        x -:FcnBinaryCallRhs-> rhs_value;
    }
}

// NOTE -- remember to call them from xgrs / grshell!
{{ set_base_type("Symbol") }}
{{ set_base_type("ValDef") }}
{{ set_base_type("VarRef") }}
{{ set_base_type("FcnDef") }}

/// in the SKETCH compiler, expressions are not statements!
rule addSkExprStmts {
    expr:FcnCall \ (SKAssertCall);
    independent { :BodyStatement(expr); }
    r:TreeReplacer(expr);

    modify {
        stmtexpr:SKStmtExpr -:SKStmtExprExpr-> expr;
        r(stmtexpr);
    }
}

{% endblock %}
