{% block comment %}
author: gatoatigrado (nicholas tung) [ntung at ntung]

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .

generate a nospec() function for the main sketch function

{% endblock %}
{% block gm %}
edge class SKImplements;
{% endblock %}



{% block grs %}
xgrs removeThisVarFromMain*
xgrs generateNospec*
xgrs doCopy
xgrs [setCopySymbolNames]
xgrs cleanupCopyTo*
xgrs checkNoMainFcns
{% endblock %}



{% block grg %}
{% import "macros.grg" as macros %}
rule removeThisVarFromMain {
    x:SketchMainFcnDef -:FcnDefParamsList-> :List
        -:ListFirst-> :ListFirstNode
        -:ListNext-> ths_lst_node:ListNode
        -:ListValue-> ths_valdef:ThisValDef
        -e:ValDefRhs-> et:EmptyTree;

    ths_valdef -:ValDefSymbol-> :Symbol
        -:TypeSymbol-> typesym:Symbol;

    x -:FcnBody-> :SKBlock -:BlockStmtList-> :List
        -:ListFirst-> body_first:ListFirstNode;

    modify {
        delete(e, et);
        ths_valdef -:ValDefRhs-> :SKNew -:FcnCallTypeSymbol-> typesym;
        exec((listInsertAfter(body_first, ths_valdef) &
            listDelete(ths_lst_node)) ||
            assertFalse("removeThisVarFromMain failed"));
    }
}

rule generateNospec {
    x:SketchMainFcnDef -:FcnDefParamsList-> params:List;
    x -:FcnDefReturnTypeSymbol-> unitsym:ScalaUnitTypeSymbol;
    x -:FcnDefSymbol-> :Symbol -:SymbolOwner-> owner:Symbol;
    modify {
        next:FcnDef<x> -:SKImplements-> nospec:FcnDef;
        nospec -:FcnDefParamsList-> nospec_params:List;
        params -:CopyTo-> nospec_params;
        nospec -:FcnDefReturnTypeSymbol-> unitsym;
        nospec -:FcnDefSymbol-> nospec_sym:Symbol;
        nospec_sym -:ClsMethod-> nospec_sym;
        nospec_sym -:SymbolOwner-> owner;
        nospec -:FcnBody-> empty_block:SKBlock;
        empty_block -:BlockStmtList-> stmt_lst:List
            -:ListFirst-> :ListFirstNode
            -:ListNext-> last:ListLastNode;
        stmt_lst -:ListLast-> last;
        empty_block -:BlockTypeSymbol-> unitsym;
        eval {
            nospec_sym.symbolName = "generated_nospec";
            nospec_sym.fullSymbolName = owner.fullSymbolName + ".generated_nospec";
        }
    }
}

rule checkNoMainFcns {
    x:SketchMainFcnDef;
    modify { exec(assertFalse("didn't erase all main functions")); }
}
{% endblock %}
