{% import "macros.grg" as macros with context %}

{% block comment %}
// author: gatoatigrado (nicholas tung) [ntung at ntung]
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain a
// copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .
//
// Convert variable-length arrays into fixed arrays for SKETCH
{% endblock %}

{% block grg %}

rule convertVLArraySymbolToFixed {
    x:VariableArraySymbol;

    modify {
        next:FixedArraySymbol<x>;
        eval { next.value = 100; }
    }
}

// replace "array = new Array[Int](100)" with "int[100] array = 0"
rule setNewAssignedArrayCalls {
    :Assign -:AssignRhs-> x:NewArrayCall;
    modify {
        next:IntConstant<x>;
        eval { next.value = 0; }
    }
}

// replace "new Array[Int](100)" with "{ 0 } : FixedArray[100]"
// (which will later get translated to "int[100] tmp = 0")
rule setNewAnonymousArrayCalls {
    x:NewArrayCall;
    x -e1:FcnArgList-> .;
    x -e3:InnerTypeSymbol-> .;
    x -e4:FcnCallSymbol-> .;
    x -e5:FcnCallTypeSymbol-> typ:Symbol;

    modify {
        delete(e1, e3, e4, e5);
        next:Block<x> -:BlockStmtList-> {{ macros.finiteListInit(
            ["c:IntConstant"]) }}
        next -:BlockExpr-> lst_node_c;
        c -:LiteralTypeSymbol-> typ;
        //--------------------------------------------------
        // first -:ValDefTypeSymbol-> typ;
        // first -:ValDefSymbol-> tmpsym:TmpSymbol -:TypeSymbol-> typ;
        // second -:VarRefSymbol-> tmpsym;
        // second -:VarRefTypeSymbol-> typ;
        //-------------------------------------------------- 
        next -:BlockTypeSymbol-> typ;

        eval {
            c.value = 0;
        }
    }
}

{% endblock %}
